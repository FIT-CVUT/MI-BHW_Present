
BHW_SOSSE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000e56  00000eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  0080009a  0080009a  00000f24  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00000f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000038b  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001308  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd4  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008fd  00000000  00000000  00004143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 00 	jmp	0x48	; 0x48 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  10:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  14:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  18:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  1c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  20:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  28:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  2c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  38:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  3c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  40:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  44:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf e5       	ldi	r28, 0x5F	; 95
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	10 e0       	ldi	r17, 0x00	; 0
  56:	a0 e6       	ldi	r26, 0x60	; 96
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	e6 e5       	ldi	r30, 0x56	; 86
  5c:	fe e0       	ldi	r31, 0x0E	; 14
  5e:	02 c0       	rjmp	.+4      	; 0x64 <.do_copy_data_start>

00000060 <.do_copy_data_loop>:
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0

00000064 <.do_copy_data_start>:
  64:	aa 39       	cpi	r26, 0x9A	; 154
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <.do_copy_data_loop>

0000006a <__do_clear_bss>:
  6a:	11 e0       	ldi	r17, 0x01	; 1
  6c:	aa e9       	ldi	r26, 0x9A	; 154
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	ae 36       	cpi	r26, 0x6E	; 110
  76:	b1 07       	cpc	r27, r17
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	0e 94 43 00 	call	0x86	; 0x86 <main>
  7e:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_exit>

00000082 <__bad_interrupt>:
  82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000086 <main>:
 *
 *	This function never returns.
 */ 

int main( void )
{
  86:	bf 92       	push	r11
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
	unsigned char len, result;		

  	p_command_APDU = &command_APDU;
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	90 93 21 01 	sts	0x0121, r25
  9c:	80 93 20 01 	sts	0x0120, r24
  	p_response_APDU = &response_APDU;
  a0:	2a ef       	ldi	r18, 0xFA	; 250
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	30 93 23 01 	sts	0x0123, r19
  a8:	20 93 22 01 	sts	0x0122, r18

	/* Reset C-APDU and R-APDU */
	t1_reset_command_APDU (p_command_APDU);
  ac:	0e 94 02 02 	call	0x404	; 0x404 <t1_reset_command_APDU>
	t1_reset_response_APDU (p_response_APDU);
  b0:	80 91 22 01 	lds	r24, 0x0122
  b4:	90 91 23 01 	lds	r25, 0x0123
  b8:	0e 94 0b 02 	call	0x416	; 0x416 <t1_reset_response_APDU>

	for (len = 0; len < 50; len++) {
  	}; /* wait before transmitting ATR (at least 400 cycles) */

	/* Send ATR */
	t1_transmit_ATR();
  bc:	0e 94 c2 02 	call	0x584	; 0x584 <t1_transmit_ATR>
    	result = t1_receive_APDU (p_command_APDU);    

    	if (result != T1_RET_OK) {            /* check for errors */
			(*p_response_APDU).NAD = command_APDU.NAD;
    		(*p_response_APDU).PCB = command_APDU.PCB;
    		(*p_response_APDU).LEN = 2;
  c0:	42 e0       	ldi	r20, 0x02	; 2
  c2:	b4 2e       	mov	r11, r20
			 *  set SW1, SW2 according to error type
 		 	 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 			 */
			switch ( result ) {
			 	case T1_RET_ERR_BUFF_INPUT:
    		   		(*p_response_APDU).SW1 = SW1_BUFFER_IN;    /* buffer size error  */
  c4:	16 e6       	ldi	r17, 0x66	; 102
					(*p_response_APDU).SW2 = SW2_BUFFER_IN;
  c6:	30 e1       	ldi	r19, 0x10	; 16
  c8:	c3 2e       	mov	r12, r19
	   				break;
		 		case T1_RET_ERR_BUFF_OUTPUT:
	    		   	(*p_response_APDU).SW1 = SW1_BUFFER_OUT;   /* buffer size error  */
					(*p_response_APDU).SW2 = SW2_BUFFER_OUT;
  ca:	20 e2       	ldi	r18, 0x20	; 32
  cc:	d2 2e       	mov	r13, r18
		 		case T1_RET_ERR_CHKSM:
		    		(*p_response_APDU).SW1 = SW1_LRC;          /* LRC checksum error */
					(*p_response_APDU).SW2 = SW2_LRC;
					break;
				default:
		    		(*p_response_APDU).SW1 = SW1_UNDEFINED;    /* LRC checksum error */
  ce:	92 e4       	ldi	r25, 0x42	; 66
  d0:	e9 2e       	mov	r14, r25
		 		case T1_RET_ERR_BUFF_OUTPUT:
	    		   	(*p_response_APDU).SW1 = SW1_BUFFER_OUT;   /* buffer size error  */
					(*p_response_APDU).SW2 = SW2_BUFFER_OUT;
	   				break;
		 		case T1_RET_ERR_CHKSM:
		    		(*p_response_APDU).SW1 = SW1_LRC;          /* LRC checksum error */
  d2:	8a e6       	ldi	r24, 0x6A	; 106
  d4:	f8 2e       	mov	r15, r24
					(*p_response_APDU).SW2 = SW2_LRC;
  d6:	07 e8       	ldi	r16, 0x87	; 135
	t1_transmit_ATR();

	/* infinite command loop */
	while(1) {
		/* receive C-APDU according to T=1 */
    	result = t1_receive_APDU (p_command_APDU);    
  d8:	80 91 20 01 	lds	r24, 0x0120
  dc:	90 91 21 01 	lds	r25, 0x0121
  e0:	0e 94 ef 02 	call	0x5de	; 0x5de <t1_receive_APDU>
  e4:	98 2f       	mov	r25, r24
  e6:	e0 91 22 01 	lds	r30, 0x0122
  ea:	f0 91 23 01 	lds	r31, 0x0123

    	if (result != T1_RET_OK) {            /* check for errors */
  ee:	88 23       	and	r24, r24
  f0:	d9 f0       	breq	.+54     	; 0x128 <main+0xa2>
			(*p_response_APDU).NAD = command_APDU.NAD;
  f2:	80 91 24 01 	lds	r24, 0x0124
  f6:	80 83       	st	Z, r24
    		(*p_response_APDU).PCB = command_APDU.PCB;
  f8:	80 91 25 01 	lds	r24, 0x0125
  fc:	81 83       	std	Z+1, r24	; 0x01
    		(*p_response_APDU).LEN = 2;
  fe:	b2 82       	std	Z+2, r11	; 0x02
    		(*p_response_APDU).LE  = 0;
 100:	15 82       	std	Z+5, r1	; 0x05
			/**
			 *  set SW1, SW2 according to error type
 		 	 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 			 */
			switch ( result ) {
 102:	92 30       	cpi	r25, 0x02	; 2
 104:	29 f0       	breq	.+10     	; 0x110 <main+0x8a>
 106:	93 30       	cpi	r25, 0x03	; 3
 108:	31 f0       	breq	.+12     	; 0x116 <main+0x90>
 10a:	91 30       	cpi	r25, 0x01	; 1
 10c:	51 f4       	brne	.+20     	; 0x122 <main+0x9c>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <main+0x96>
			 	case T1_RET_ERR_BUFF_INPUT:
    		   		(*p_response_APDU).SW1 = SW1_BUFFER_IN;    /* buffer size error  */
 110:	13 83       	std	Z+3, r17	; 0x03
					(*p_response_APDU).SW2 = SW2_BUFFER_IN;
 112:	c4 82       	std	Z+4, r12	; 0x04
 114:	10 c0       	rjmp	.+32     	; 0x136 <main+0xb0>
	   				break;
		 		case T1_RET_ERR_BUFF_OUTPUT:
	    		   	(*p_response_APDU).SW1 = SW1_BUFFER_OUT;   /* buffer size error  */
 116:	13 83       	std	Z+3, r17	; 0x03
					(*p_response_APDU).SW2 = SW2_BUFFER_OUT;
 118:	d4 82       	std	Z+4, r13	; 0x04
 11a:	0d c0       	rjmp	.+26     	; 0x136 <main+0xb0>
	   				break;
		 		case T1_RET_ERR_CHKSM:
		    		(*p_response_APDU).SW1 = SW1_LRC;          /* LRC checksum error */
 11c:	f3 82       	std	Z+3, r15	; 0x03
					(*p_response_APDU).SW2 = SW2_LRC;
 11e:	04 83       	std	Z+4, r16	; 0x04
 120:	0a c0       	rjmp	.+20     	; 0x136 <main+0xb0>
					break;
				default:
		    		(*p_response_APDU).SW1 = SW1_UNDEFINED;    /* LRC checksum error */
 122:	e3 82       	std	Z+3, r14	; 0x03
					(*p_response_APDU).SW2 = SW2_UNDEFINED;
 124:	14 82       	std	Z+4, r1	; 0x04
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0xb0>
					break;
		   	}
    	}
    	else {
		 /* Call command handler  */
      		command_handler (p_command_APDU, p_response_APDU);
 128:	80 91 20 01 	lds	r24, 0x0120
 12c:	90 91 21 01 	lds	r25, 0x0121
 130:	bf 01       	movw	r22, r30
 132:	0e 94 cc 00 	call	0x198	; 0x198 <command_handler>
    	}
	
		/* transmit R-APDU according to T=1 */
		t1_send_APDU (p_response_APDU);        
 136:	80 91 22 01 	lds	r24, 0x0122
 13a:	90 91 23 01 	lds	r25, 0x0123
 13e:	0e 94 37 02 	call	0x46e	; 0x46e <t1_send_APDU>

    	/* Reset C-APDU and R-APDU */
		t1_reset_command_APDU (p_command_APDU);
 142:	80 91 20 01 	lds	r24, 0x0120
 146:	90 91 21 01 	lds	r25, 0x0121
 14a:	0e 94 02 02 	call	0x404	; 0x404 <t1_reset_command_APDU>
		t1_reset_response_APDU (p_response_APDU);
 14e:	80 91 22 01 	lds	r24, 0x0122
 152:	90 91 23 01 	lds	r25, 0x0123
 156:	0e 94 0b 02 	call	0x416	; 0x416 <t1_reset_response_APDU>
 15a:	be cf       	rjmp	.-132    	; 0xd8 <main+0x52>

0000015c <command_verify_APDU_parameters>:

/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
 15c:	fc 01       	movw	r30, r24
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 15e:	85 81       	ldd	r24, Z+5	; 0x05
 160:	86 17       	cp	r24, r22
 162:	11 f0       	breq	.+4      	; 0x168 <command_verify_APDU_parameters+0xc>
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	07 c0       	rjmp	.+14     	; 0x176 <command_verify_APDU_parameters+0x1a>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	86 81       	ldd	r24, Z+6	; 0x06
 16c:	84 17       	cp	r24, r20
 16e:	09 f4       	brne	.+2      	; 0x172 <command_verify_APDU_parameters+0x16>
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	28 27       	eor	r18, r24
	{
		return OK;
	}
	return ERROR;
}
 176:	82 2f       	mov	r24, r18
 178:	08 95       	ret

0000017a <command_verify_APDU_length>:

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
 17a:	fc 01       	movw	r30, r24
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 17c:	87 81       	ldd	r24, Z+7	; 0x07
 17e:	86 17       	cp	r24, r22
 180:	11 f0       	breq	.+4      	; 0x186 <command_verify_APDU_length+0xc>
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	07 c0       	rjmp	.+14     	; 0x194 <command_verify_APDU_length+0x1a>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	80 85       	ldd	r24, Z+8	; 0x08
 18a:	84 17       	cp	r24, r20
 18c:	09 f4       	brne	.+2      	; 0x190 <command_verify_APDU_length+0x16>
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	28 27       	eor	r18, r24
	{
		return OK;
	}
	return ERROR;
}
 194:	82 2f       	mov	r24, r18
 196:	08 95       	ret

00000198 <command_handler>:
#include "crypt.h"
#include "types.h"
#include "t1.h"

void command_handler (str_command_APDU * com_APDU, str_response_APDU * resp_APDU)
{
 198:	fc 01       	movw	r30, r24
 19a:	db 01       	movw	r26, r22
  (*resp_APDU).NAD = (*com_APDU).NAD;
 19c:	80 81       	ld	r24, Z
 19e:	8c 93       	st	X, r24
  (*resp_APDU).PCB = (*com_APDU).PCB;
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	8c 93       	st	X, r24
 1a6:	11 97       	sbiw	r26, 0x01	; 1

  if ((*com_APDU).PCB == 0xC1) {  /* S-Block Handling */
 1a8:	81 81       	ldd	r24, Z+1	; 0x01
 1aa:	81 3c       	cpi	r24, 0xC1	; 193
 1ac:	71 f4       	brne	.+28     	; 0x1ca <command_handler+0x32>

    (*resp_APDU).NAD = (*com_APDU).NAD;
 1ae:	80 81       	ld	r24, Z
 1b0:	8c 93       	st	X, r24
    (*resp_APDU).PCB = 0xE1;
 1b2:	81 ee       	ldi	r24, 0xE1	; 225
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	8c 93       	st	X, r24
 1b8:	11 97       	sbiw	r26, 0x01	; 1
    (*resp_APDU).LEN = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	8c 93       	st	X, r24
 1c0:	12 97       	sbiw	r26, 0x02	; 2
    (*resp_APDU).data_field[0] = (*com_APDU).CLA;
 1c2:	83 81       	ldd	r24, Z+3	; 0x03
 1c4:	16 96       	adiw	r26, 0x06	; 6
 1c6:	8c 93       	st	X, r24
 1c8:	08 95       	ret
  }
  else {            /* I-Block Handling */

   switch ((*com_APDU).CLA) {	/* Determine the class of the command according to the CLA byte */
 1ca:	83 81       	ldd	r24, Z+3	; 0x03
 1cc:	80 38       	cpi	r24, 0x80	; 128
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <command_handler+0x3a>
 1d0:	85 c0       	rjmp	.+266    	; 0x2dc <command_handler+0x144>
      case 0x80: {
         switch ((*com_APDU).INS) {	/* Determine the type of the instruction according to the INS byte*/
 1d2:	84 81       	ldd	r24, Z+4	; 0x04
 1d4:	80 35       	cpi	r24, 0x50	; 80
 1d6:	d1 f1       	breq	.+116    	; 0x24c <command_handler+0xb4>
 1d8:	81 35       	cpi	r24, 0x51	; 81
 1da:	30 f4       	brcc	.+12     	; 0x1e8 <command_handler+0x50>
 1dc:	80 34       	cpi	r24, 0x40	; 64
 1de:	71 f0       	breq	.+28     	; 0x1fc <command_handler+0x64>
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <command_handler+0x4e>
 1e4:	77 c0       	rjmp	.+238    	; 0x2d4 <command_handler+0x13c>
 1e6:	1e c0       	rjmp	.+60     	; 0x224 <command_handler+0x8c>
 1e8:	80 36       	cpi	r24, 0x60	; 96
 1ea:	09 f4       	brne	.+2      	; 0x1ee <command_handler+0x56>
 1ec:	53 c0       	rjmp	.+166    	; 0x294 <command_handler+0xfc>
 1ee:	81 36       	cpi	r24, 0x61	; 97
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <command_handler+0x5c>
 1f2:	60 c0       	rjmp	.+192    	; 0x2b4 <command_handler+0x11c>
 1f4:	82 35       	cpi	r24, 0x52	; 82
 1f6:	09 f0       	breq	.+2      	; 0x1fa <command_handler+0x62>
 1f8:	6d c0       	rjmp	.+218    	; 0x2d4 <command_handler+0x13c>
 1fa:	3c c0       	rjmp	.+120    	; 0x274 <command_handler+0xdc>
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 1fc:	85 81       	ldd	r24, Z+5	; 0x05
 1fe:	88 23       	and	r24, r24
 200:	09 f0       	breq	.+2      	; 0x204 <command_handler+0x6c>
 202:	70 c0       	rjmp	.+224    	; 0x2e4 <command_handler+0x14c>
 204:	86 81       	ldd	r24, Z+6	; 0x06
 206:	88 23       	and	r24, r24
 208:	09 f0       	breq	.+2      	; 0x20c <command_handler+0x74>
 20a:	6c c0       	rjmp	.+216    	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 20c:	87 81       	ldd	r24, Z+7	; 0x07
 20e:	80 31       	cpi	r24, 0x10	; 16
 210:	09 f0       	breq	.+2      	; 0x214 <command_handler+0x7c>
 212:	6c c0       	rjmp	.+216    	; 0x2ec <command_handler+0x154>
 214:	80 85       	ldd	r24, Z+8	; 0x08
 216:	80 31       	cpi	r24, 0x10	; 16
 218:	09 f0       	breq	.+2      	; 0x21c <command_handler+0x84>
 21a:	68 c0       	rjmp	.+208    	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x10, 0x10 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                     crypt_c_encrypt_16 (com_APDU, resp_APDU);
 21c:	cf 01       	movw	r24, r30
 21e:	0e 94 a4 04 	call	0x948	; 0x948 <crypt_c_encrypt_16>
 222:	08 95       	ret
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 224:	85 81       	ldd	r24, Z+5	; 0x05
 226:	88 23       	and	r24, r24
 228:	09 f0       	breq	.+2      	; 0x22c <command_handler+0x94>
 22a:	5c c0       	rjmp	.+184    	; 0x2e4 <command_handler+0x14c>
 22c:	86 81       	ldd	r24, Z+6	; 0x06
 22e:	88 23       	and	r24, r24
 230:	09 f0       	breq	.+2      	; 0x234 <command_handler+0x9c>
 232:	58 c0       	rjmp	.+176    	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 234:	87 81       	ldd	r24, Z+7	; 0x07
 236:	80 31       	cpi	r24, 0x10	; 16
 238:	09 f0       	breq	.+2      	; 0x23c <command_handler+0xa4>
 23a:	58 c0       	rjmp	.+176    	; 0x2ec <command_handler+0x154>
 23c:	80 85       	ldd	r24, Z+8	; 0x08
 23e:	80 31       	cpi	r24, 0x10	; 16
 240:	09 f0       	breq	.+2      	; 0x244 <command_handler+0xac>
 242:	54 c0       	rjmp	.+168    	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x10, 0x10 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                     crypt_c_decrypt_16 (com_APDU, resp_APDU);
 244:	cf 01       	movw	r24, r30
 246:	0e 94 7d 04 	call	0x8fa	; 0x8fa <crypt_c_decrypt_16>
 24a:	08 95       	ret
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 24c:	85 81       	ldd	r24, Z+5	; 0x05
 24e:	88 23       	and	r24, r24
 250:	09 f0       	breq	.+2      	; 0x254 <command_handler+0xbc>
 252:	48 c0       	rjmp	.+144    	; 0x2e4 <command_handler+0x14c>
 254:	86 81       	ldd	r24, Z+6	; 0x06
 256:	88 23       	and	r24, r24
 258:	09 f0       	breq	.+2      	; 0x25c <command_handler+0xc4>
 25a:	44 c0       	rjmp	.+136    	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 25c:	87 81       	ldd	r24, Z+7	; 0x07
 25e:	80 31       	cpi	r24, 0x10	; 16
 260:	09 f0       	breq	.+2      	; 0x264 <command_handler+0xcc>
 262:	44 c0       	rjmp	.+136    	; 0x2ec <command_handler+0x154>
 264:	80 85       	ldd	r24, Z+8	; 0x08
 266:	80 31       	cpi	r24, 0x10	; 16
 268:	09 f0       	breq	.+2      	; 0x26c <command_handler+0xd4>
 26a:	40 c0       	rjmp	.+128    	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x10, 0x10 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                           crypt_asm_encrypt_16 (com_APDU, resp_APDU);
 26c:	cf 01       	movw	r24, r30
 26e:	0e 94 56 04 	call	0x8ac	; 0x8ac <crypt_asm_encrypt_16>
 272:	08 95       	ret
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 274:	85 81       	ldd	r24, Z+5	; 0x05
 276:	88 23       	and	r24, r24
 278:	a9 f5       	brne	.+106    	; 0x2e4 <command_handler+0x14c>
 27a:	86 81       	ldd	r24, Z+6	; 0x06
 27c:	88 23       	and	r24, r24
 27e:	91 f5       	brne	.+100    	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 280:	87 81       	ldd	r24, Z+7	; 0x07
 282:	80 31       	cpi	r24, 0x10	; 16
 284:	99 f5       	brne	.+102    	; 0x2ec <command_handler+0x154>
 286:	80 85       	ldd	r24, Z+8	; 0x08
 288:	80 31       	cpi	r24, 0x10	; 16
 28a:	81 f5       	brne	.+96     	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x10, 0x10 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                     crypt_asm_decrypt_16 (com_APDU, resp_APDU);
 28c:	cf 01       	movw	r24, r30
 28e:	0e 94 2f 04 	call	0x85e	; 0x85e <crypt_asm_decrypt_16>
 292:	08 95       	ret
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 294:	85 81       	ldd	r24, Z+5	; 0x05
 296:	88 23       	and	r24, r24
 298:	29 f5       	brne	.+74     	; 0x2e4 <command_handler+0x14c>
 29a:	86 81       	ldd	r24, Z+6	; 0x06
 29c:	88 23       	and	r24, r24
 29e:	11 f5       	brne	.+68     	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 2a0:	87 81       	ldd	r24, Z+7	; 0x07
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	19 f5       	brne	.+70     	; 0x2ec <command_handler+0x154>
 2a6:	80 85       	ldd	r24, Z+8	; 0x08
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	01 f5       	brne	.+64     	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x08, 0x08 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                     crypt_present_encrypt_8 (com_APDU, resp_APDU);
 2ac:	cf 01       	movw	r24, r30
 2ae:	0e 94 08 04 	call	0x810	; 0x810 <crypt_present_encrypt_8>
 2b2:	08 95       	ret
/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
unsigned char command_verify_APDU_parameters ( str_command_APDU * command_APDU, unsigned char APDU_P1, unsigned char APDU_P2 )
{
	if ( (*command_APDU).P1 == APDU_P1 && (*command_APDU).P2 == APDU_P2 )
 2b4:	85 81       	ldd	r24, Z+5	; 0x05
 2b6:	88 23       	and	r24, r24
 2b8:	a9 f4       	brne	.+42     	; 0x2e4 <command_handler+0x14c>
 2ba:	86 81       	ldd	r24, Z+6	; 0x06
 2bc:	88 23       	and	r24, r24
 2be:	91 f4       	brne	.+36     	; 0x2e4 <command_handler+0x14c>
	return ERROR;
}

unsigned char command_verify_APDU_length ( str_command_APDU * command_APDU, unsigned char APDU_LC, unsigned char APDU_LE )
{
	if ((*command_APDU).LC == APDU_LC && (*command_APDU).LE == APDU_LE)
 2c0:	87 81       	ldd	r24, Z+7	; 0x07
 2c2:	82 31       	cpi	r24, 0x12	; 18
 2c4:	99 f4       	brne	.+38     	; 0x2ec <command_handler+0x154>
 2c6:	80 85       	ldd	r24, Z+8	; 0x08
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	81 f4       	brne	.+32     	; 0x2ec <command_handler+0x154>
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x12, 0x08 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
               }
               else {
                     crypt_present_encrypt_8_key (com_APDU, resp_APDU);
 2cc:	cf 01       	movw	r24, r30
 2ce:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <crypt_present_encrypt_8_key>
 2d2:	08 95       	ret
               }
               break;
            default:
               t1_set_instruction_not_supported(resp_APDU);
 2d4:	cd 01       	movw	r24, r26
 2d6:	0e 94 1e 02 	call	0x43c	; 0x43c <t1_set_instruction_not_supported>
 2da:	08 95       	ret
               break;
         }
         break;
      }
      default: {
         t1_set_class_not_supported(resp_APDU);
 2dc:	cb 01       	movw	r24, r22
 2de:	0e 94 16 02 	call	0x42c	; 0x42c <t1_set_class_not_supported>
 2e2:	08 95       	ret
                     crypt_present_encrypt_8 (com_APDU, resp_APDU);
               }
               break;
            case 0x61:	/* Call PRESENT-encryption */
               if      ( command_verify_APDU_parameters( com_APDU, 0x00, 0x00 ) != OK ) {
                     t1_set_unexpected_parameters( resp_APDU );
 2e4:	cd 01       	movw	r24, r26
 2e6:	0e 94 2e 02 	call	0x45c	; 0x45c <t1_set_unexpected_parameters>
 2ea:	08 95       	ret
               } 
               else if ( command_verify_APDU_length(     com_APDU, 0x12, 0x08 ) != OK ) {
                     t1_set_unexpected_length(resp_APDU);
 2ec:	cd 01       	movw	r24, r26
 2ee:	0e 94 26 02 	call	0x44c	; 0x44c <t1_set_unexpected_length>
 2f2:	08 95       	ret

000002f4 <intrabitdelay>:

;========================================================================
; Wait loops.
; 70 cycles delay for intrabit delay
intrabitdelay:
	ldi		r22, 21			; 1
 2f4:	65 e1       	ldi	r22, 0x15	; 21

000002f6 <delay>:
; Wait t17*3+7 cycles
delay:
	dec		r22				; 1
 2f6:	6a 95       	dec	r22
	brne	delay			; 1/2
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <delay>
	ret						; 4
 2fa:	08 95       	ret

000002fc <delay1etu>:

delay1etu:
	ldi		r22, 121		; 1
 2fc:	69 e7       	ldi	r22, 0x79	; 121
	rjmp	delay			; 2
 2fe:	fb cf       	rjmp	.-10     	; 0x2f6 <delay>

00000300 <recbytet0>:

;========================================================================
; Receive a byte with T=0 error correction.
; result r25(=0):r24
recbytet0:
	push	r23				; 2 - getbit
 300:	7f 93       	push	r23
	push	r22				; 2 - delay
 302:	6f 93       	push	r22
	push	r21				; 2 - loop counter
 304:	5f 93       	push	r21
	push	r20				; 2 - parity counter
 306:	4f 93       	push	r20

	; Set direction bit, to indicate, that we received a byte
	ldi		r22, 1
 308:	61 e0       	ldi	r22, 0x01	; 1
	sts		direction,r22
 30a:	60 93 6d 01 	sts	0x016D, r22

0000030e <restartrecbyte>:

restartrecbyte:
	; Setup IN direction
	cbi		DDRB, 6			; 2
 30e:	be 98       	cbi	0x17, 6	; 23
	cbi		PORTB, 6		; 2
 310:	c6 98       	cbi	0x18, 6	; 24

00000312 <waitforstart>:

; Wait for start bit.
waitforstart:
	; Bit begins here.
	sbic	PINB, IO_PIN	; 1/2!
 312:	b6 99       	sbic	0x16, 6	; 22
	rjmp	waitforstart	; 2/0
 314:	fe cf       	rjmp	.-4      	; 0x312 <waitforstart>
	sbic	PINB, IO_PIN	; 1/2! - Recheck for spike
 316:	b6 99       	sbic	0x16, 6	; 22
	rjmp	waitforstart	; 2/0
 318:	fc cf       	rjmp	.-8      	; 0x312 <waitforstart>
	; Sample start bit
	clr		r24				; 1
 31a:	88 27       	eor	r24, r24
	clr		r25				; 1 - Clear zero byte for ADC
 31c:	99 27       	eor	r25, r25
	ldi		r22, 31			; 1
 31e:	6f e1       	ldi	r22, 0x1F	; 31
	rcall	delay			; 100
 320:	ea df       	rcall	.-44     	; 0x2f6 <delay>
	rcall	getbit			; 3 (16bit PC)
 322:	22 d0       	rcall	.+68     	; 0x368 <getbit>
	;brcs	waitforstart	; 1/2 - Go on, even if not valid a start bit?
	nop						; 1 - For brcs
 324:	00 00       	nop
; Receive now 9 bits
	ldi		r21, 0x09		; 1
 326:	59 e0       	ldi	r21, 0x09	; 9
	clr		r20				; 1
 328:	44 27       	eor	r20, r20
	ldi		r22, 66			; 1
 32a:	62 e4       	ldi	r22, 0x42	; 66
	nop						; 1
 32c:	00 00       	nop
	...

00000330 <rnextbit>:
	nop						; 1
rnextbit:
	rcall	delay			; 205/202
 330:	e2 df       	rcall	.-60     	; 0x2f6 <delay>
	rcall	getbit			; 3
 332:	1a d0       	rcall	.+52     	; 0x368 <getbit>
	add		r20, r23		; 1
 334:	47 0f       	add	r20, r23
	clc						; 1
 336:	88 94       	clc
	sbrc	r23, 0			; 1/2
 338:	70 fd       	sbrc	r23, 0
	sec						; 1/0
 33a:	08 94       	sec
	ror		r24				; 1
 33c:	87 95       	ror	r24
	ldi		r22, 65			; 1
 33e:	61 e4       	ldi	r22, 0x41	; 65
	dec		r21				; 1
 340:	5a 95       	dec	r21
	brne	rnextbit		; 1/2
 342:	b1 f7       	brne	.-20     	; 0x330 <rnextbit>
; Check parity
	rol		r24				; 1 - We've rotated one to much
 344:	88 1f       	adc	r24, r24
	sbrc	r20, 0			; 1/2
 346:	40 fd       	sbrc	r20, 0
	rjmp	regetbyte		; 2/0
 348:	08 c0       	rjmp	.+16     	; 0x35a <regetbyte>

	; Wait halve etu
	ldi		r22, 76			; 1
 34a:	6c e4       	ldi	r22, 0x4C	; 76
	rcall	delay			; 235 - Precise enough
 34c:	d4 df       	rcall	.-88     	; 0x2f6 <delay>

	clr		r25
 34e:	99 27       	eor	r25, r25
	pop		r20				; 2 - parity counter
 350:	4f 91       	pop	r20
	pop		r21				; 2 - loop counter
 352:	5f 91       	pop	r21
	pop		r22				; 2 - delay
 354:	6f 91       	pop	r22
	pop		r23				; 2 - getbit
 356:	7f 91       	pop	r23
	ret
 358:	08 95       	ret

0000035a <regetbyte>:

regetbyte:
	; Wait halve etu
	ldi		r22, 76			; 1
 35a:	6c e4       	ldi	r22, 0x4C	; 76
	rcall	delay			; 235 - Precise enough
 35c:	cc df       	rcall	.-104    	; 0x2f6 <delay>
	; Set OUT direction
	sbi		DDRB, 6			; 2
 35e:	be 9a       	sbi	0x17, 6	; 23
	; Signal low
	cbi		PORTB, 6		; 2
 360:	c6 98       	cbi	0x18, 6	; 24
	ldi		r22, 182		; 2
 362:	66 eb       	ldi	r22, 0xB6	; 182
	rcall	delay			; 553 - about 1.5 etu
 364:	c8 df       	rcall	.-112    	; 0x2f6 <delay>
	rjmp	restartrecbyte	; 2
 366:	d3 cf       	rjmp	.-90     	; 0x30e <restartrecbyte>

00000368 <getbit>:
; Uses r23, r25
; Returns bit in r23.0.
; 5 cycles before first bit
; 8 cycles after last bit.
getbit:
	clr		r23				; 1
 368:	77 27       	eor	r23, r23
	clc						; 1
 36a:	88 94       	clc
	; At start + 112 cycles
	sbic	PINB, IO_PIN	; 1/2
 36c:	b6 99       	sbic	0x16, 6	; 22
	sec						; 1/0
 36e:	08 94       	sec
	adc		r23, r25		; 1
 370:	79 1f       	adc	r23, r25
	rcall	intrabitdelay	; 70
 372:	c0 df       	rcall	.-128    	; 0x2f4 <intrabitdelay>
	clc						; 1
 374:	88 94       	clc
	; At start + 186 cycles
	sbic	PINB, IO_PIN	; 1/2
 376:	b6 99       	sbic	0x16, 6	; 22
	sec						; 1/0
 378:	08 94       	sec
	adc		r23, r25		; 1
 37a:	79 1f       	adc	r23, r25
	rcall	intrabitdelay	; 70
 37c:	bb df       	rcall	.-138    	; 0x2f4 <intrabitdelay>
	clc						; 1
 37e:	88 94       	clc
	; At start + 260 cycles
	sbic	PINB, IO_PIN	; 1/2
 380:	b6 99       	sbic	0x16, 6	; 22
	sec						; 1/0
 382:	08 94       	sec
	adc		r23, r25		; 1
 384:	79 1f       	adc	r23, r25
	; Get second bit of the sum.
	lsr		r23				; 1
 386:	76 95       	lsr	r23
	ret						; 4	(with 16bit PC)
 388:	08 95       	ret

0000038a <sendbytet0>:
;========================================================================
; Send a byte with T=0 error correction.
; byte r25(=0):r24
sendbytet0:
	push	r22				; 2 - delay
 38a:	6f 93       	push	r22
	push	r23				; 2 - parity counter
 38c:	7f 93       	push	r23

	lds		r22,direction
 38e:	60 91 6d 01 	lds	r22, 0x016D
	tst		r22
 392:	66 23       	and	r22, r22
	breq	resendbytet0
 394:	29 f0       	breq	.+10     	; 0x3a0 <resendbytet0>
	rcall	delay1etu		;
 396:	b2 df       	rcall	.-156    	; 0x2fc <delay1etu>
	rcall	delay1etu		;
 398:	b1 df       	rcall	.-158    	; 0x2fc <delay1etu>
	; Clear direction bit, to indicate, that we sent a byte
	ldi		r22, 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
	sts		direction,r22
 39c:	60 93 6d 01 	sts	0x016D, r22

000003a0 <resendbytet0>:

resendbytet0:
	; Set OUT direction
	sbi		PORTB, 6		; 2
 3a0:	c6 9a       	sbi	0x18, 6	; 24
	sbi		DDRB, 6			; 2
 3a2:	be 9a       	sbi	0x17, 6	; 23
	; Send start bit
	cbi		PORTB, IO_PIN	; 2
 3a4:	c6 98       	cbi	0x18, 6	; 24
	ldi		r22, 119		; 1
 3a6:	67 e7       	ldi	r22, 0x77	; 119
	rcall	delay			; 364
 3a8:	a6 df       	rcall	.-180    	; 0x2f6 <delay>
	; Send now 8 bits
	ldi		r25, 0x08		; 1
 3aa:	98 e0       	ldi	r25, 0x08	; 8
	clr		r23				; 1
 3ac:	77 27       	eor	r23, r23

000003ae <snextbit>:
snextbit:
	ror		r24				; 1
 3ae:	87 95       	ror	r24
	brcs	sendbit1		; 1/2
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <sendbit1>
	cbi		PORTB, IO_PIN	; 2
 3b2:	c6 98       	cbi	0x18, 6	; 24
	rjmp	bitset			; 2
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <bitset>

000003b6 <sendbit1>:
sendbit1:
	sbi		PORTB, IO_PIN	; 2
 3b6:	c6 9a       	sbi	0x18, 6	; 24
	inc		r23				; 1
 3b8:	73 95       	inc	r23

000003ba <bitset>:
bitset:
	ldi		r22, 118		; 1
 3ba:	66 e7       	ldi	r22, 0x76	; 118
	rcall	delay			; 361
 3bc:	9c df       	rcall	.-200    	; 0x2f6 <delay>
	nop						; 1
 3be:	00 00       	nop
	dec		r25				; 1
 3c0:	9a 95       	dec	r25
	brne	snextbit		; 1/2
 3c2:	a9 f7       	brne	.-22     	; 0x3ae <snextbit>
	; Send parity
	sbrc	r23, 0			; 1/2
 3c4:	70 fd       	sbrc	r23, 0
	rjmp	sendparity1		; 2
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <sendparity1>
	nop						; 1
 3c8:	00 00       	nop
	nop						; 1
 3ca:	00 00       	nop
	cbi		PORTB, IO_PIN	; 2
 3cc:	c6 98       	cbi	0x18, 6	; 24
	rjmp	delayparity		; 2
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <delayparity>

000003d0 <sendparity1>:
sendparity1:
	nop						; 1
 3d0:	00 00       	nop
	sbi		PORTB, IO_PIN	; 2
 3d2:	c6 9a       	sbi	0x18, 6	; 24
	nop						; 1
 3d4:	00 00       	nop
	...

000003d8 <delayparity>:
	nop						; 1
delayparity:
	ldi		r22, 112		; 1
 3d8:	60 e7       	ldi	r22, 0x70	; 112
	rcall	delay			; 343
 3da:	8d df       	rcall	.-230    	; 0x2f6 <delay>
	; Stop bit
	sbi		PORTB, IO_PIN	; 2
 3dc:	c6 9a       	sbi	0x18, 6	; 24
	ldi		r22, 119		; 1
 3de:	67 e7       	ldi	r22, 0x77	; 119
	rcall	delay			; 364
 3e0:	8a df       	rcall	.-236    	; 0x2f6 <delay>
	; Set IN direction
	cbi		DDRB, 6			; 2
 3e2:	be 98       	cbi	0x17, 6	; 23
	cbi		PORTB, 6		; 2
 3e4:	c6 98       	cbi	0x18, 6	; 24
	; Look for error signal
	clc						; 1
 3e6:	88 94       	clc
	sbic	PINB, IO_PIN	; 1/2
 3e8:	b6 99       	sbic	0x16, 6	; 22
	sec						; 1/0
 3ea:	08 94       	sec
	brcs	retsendbytet0	; 1/2
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <retsendbytet0>
	; Resend byte
	; Bring byte to starting position
	ror		r24				; 1
 3ee:	87 95       	ror	r24

000003f0 <waitforendoferror>:
	; Wait for end of error signal
waitforendoferror:
	sbic	PINB, IO_PIN	; 1/2!
 3f0:	b6 99       	sbic	0x16, 6	; 22
	rjmp	waitforendoferror	; 2/0
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <waitforendoferror>
	; Wait then a halve etu
	ldi		r22, 58			; 1
 3f4:	6a e3       	ldi	r22, 0x3A	; 58
	rcall	delay			; 181
 3f6:	7f df       	rcall	.-258    	; 0x2f6 <delay>
	rjmp	resendbytet0	; 2
 3f8:	d3 cf       	rjmp	.-90     	; 0x3a0 <resendbytet0>

000003fa <retsendbytet0>:
	; return
retsendbytet0:
	ldi		r22, 116		; 1
 3fa:	64 e7       	ldi	r22, 0x74	; 116
	rcall	delay			; 355
 3fc:	7c df       	rcall	.-264    	; 0x2f6 <delay>
	pop		r23				; 2 - parity counter
 3fe:	7f 91       	pop	r23
	pop		r22				; 2 - delay
 400:	6f 91       	pop	r22
	ret						; 4
 402:	08 95       	ret

00000404 <t1_reset_command_APDU>:
      sendbytet0 (APDU_buffer[cnt]);
  }
}

void t1_reset_command_APDU ( str_command_APDU * command_APDU )
{
 404:	fc 01       	movw	r30, r24
	(*command_APDU).NAD = 0x00;
 406:	10 82       	st	Z, r1
	(*command_APDU).PCB = 0x00;
 408:	11 82       	std	Z+1, r1	; 0x01
	(*command_APDU).LEN = 0;
 40a:	12 82       	std	Z+2, r1	; 0x02
	(*command_APDU).LE = 0;
 40c:	10 86       	std	Z+8, r1	; 0x08
	(*command_APDU).LC = 0;
 40e:	17 82       	std	Z+7, r1	; 0x07
	(*command_APDU).CLA = 0x00;
 410:	13 82       	std	Z+3, r1	; 0x03
	(*command_APDU).INS = 0x00;
 412:	14 82       	std	Z+4, r1	; 0x04
}
 414:	08 95       	ret

00000416 <t1_reset_response_APDU>:

void t1_reset_response_APDU ( str_response_APDU * response_APDU )
{
 416:	fc 01       	movw	r30, r24
	(*response_APDU).NAD = 0x00;
 418:	10 82       	st	Z, r1
	(*response_APDU).PCB = 0x00;
 41a:	11 82       	std	Z+1, r1	; 0x01
	(*response_APDU).LEN = 2;
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	82 83       	std	Z+2, r24	; 0x02
	(*response_APDU).LE = 0;
 420:	15 82       	std	Z+5, r1	; 0x05
	(*response_APDU).SW1 = SW1_EEPROM;    /* error w/o changing EEPROM */
 422:	82 e6       	ldi	r24, 0x62	; 98
 424:	83 83       	std	Z+3, r24	; 0x03
	(*response_APDU).SW2 = SW2_EEPROM;
 426:	86 e8       	ldi	r24, 0x86	; 134
 428:	84 83       	std	Z+4, r24	; 0x04
}
 42a:	08 95       	ret

0000042c <t1_set_class_not_supported>:

void t1_set_class_not_supported ( str_response_APDU * response_APDU )
{
 42c:	fc 01       	movw	r30, r24
	(*response_APDU).LEN = 2;
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	82 83       	std	Z+2, r24	; 0x02
	(*response_APDU).LE = 0;
 432:	15 82       	std	Z+5, r1	; 0x05
	(*response_APDU).SW1 = SW1_CLASS_ERR;  /* class not supported */
 434:	8e e6       	ldi	r24, 0x6E	; 110
 436:	83 83       	std	Z+3, r24	; 0x03
	(*response_APDU).SW2 = SW2_CLASS_ERR;
 438:	14 82       	std	Z+4, r1	; 0x04
}
 43a:	08 95       	ret

0000043c <t1_set_instruction_not_supported>:

void t1_set_instruction_not_supported ( str_response_APDU * response_APDU )
{
 43c:	fc 01       	movw	r30, r24
	(*response_APDU).LEN = 2;
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	82 83       	std	Z+2, r24	; 0x02
	(*response_APDU).LE = 0;
 442:	15 82       	std	Z+5, r1	; 0x05
	(*response_APDU).SW1 = SW1_INSTR_ERR;  /* instruction not supported */
 444:	8d e6       	ldi	r24, 0x6D	; 109
 446:	83 83       	std	Z+3, r24	; 0x03
	(*response_APDU).SW2 = SW2_INSTR_ERR;
 448:	14 82       	std	Z+4, r1	; 0x04
}
 44a:	08 95       	ret

0000044c <t1_set_unexpected_length>:

void t1_set_unexpected_length ( str_response_APDU * response_APDU )
{
 44c:	fc 01       	movw	r30, r24
	(*response_APDU).LEN = 2;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	82 83       	std	Z+2, r24	; 0x02
	(*response_APDU).LE = 0;
 452:	15 82       	std	Z+5, r1	; 0x05
	(*response_APDU).SW1 = SW1_LENGTH_ERR;  /* unexpected length */
 454:	87 e6       	ldi	r24, 0x67	; 103
 456:	83 83       	std	Z+3, r24	; 0x03
	(*response_APDU).SW2 = SW2_LENGTH_ERR;
 458:	14 82       	std	Z+4, r1	; 0x04
}
 45a:	08 95       	ret

0000045c <t1_set_unexpected_parameters>:

/**
 *	BUG FIX Myslivec, Novy 26.02.2015 #parameters_check
 */
void t1_set_unexpected_parameters ( str_response_APDU * response_APDU )
{
 45c:	fc 01       	movw	r30, r24
	(*response_APDU).LEN = 2;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	82 83       	std	Z+2, r24	; 0x02
	(*response_APDU).LE = 0;
 462:	15 82       	std	Z+5, r1	; 0x05
	(*response_APDU).SW1 = SW1_PARAMETER_ERR;  /* unexpected parameters */
 464:	8a e6       	ldi	r24, 0x6A	; 106
 466:	83 83       	std	Z+3, r24	; 0x03
	(*response_APDU).SW2 = SW2_PARAMETER_ERR;
 468:	80 e8       	ldi	r24, 0x80	; 128
 46a:	84 83       	std	Z+4, r24	; 0x04
}
 46c:	08 95       	ret

0000046e <t1_send_APDU>:
    return T1_RET_OK;
  }
}

void t1_send_APDU( str_response_APDU * response_APDU )
{
 46e:	cf 92       	push	r12
 470:	df 92       	push	r13
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	c9 54       	subi	r28, 0x49	; 73
 482:	d0 40       	sbci	r29, 0x00	; 0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	8c 01       	movw	r16, r24
  unsigned char EDC, cnt;
  unsigned char APDU_buffer[INPUT_BUFFER_SIZE];


  /* process and transmit response APDU */
  if ((*response_APDU).PCB > 127) {    /* R- or S-Block */
 490:	dc 01       	movw	r26, r24
 492:	11 96       	adiw	r26, 0x01	; 1
 494:	2c 91       	ld	r18, X
 496:	11 97       	sbiw	r26, 0x01	; 1
 498:	3c 91       	ld	r19, X
 49a:	12 96       	adiw	r26, 0x02	; 2
 49c:	4c 91       	ld	r20, X
 49e:	12 97       	sbiw	r26, 0x02	; 2
 4a0:	27 ff       	sbrs	r18, 7
 4a2:	1b c0       	rjmp	.+54     	; 0x4da <t1_send_APDU+0x6c>
    EDC = 0;
    APDU_buffer[0] = (*response_APDU).NAD;    /* Network address */
 4a4:	39 83       	std	Y+1, r19	; 0x01
    EDC = EDC ^ (*response_APDU).NAD;
    APDU_buffer[1] = (*response_APDU).PCB;    /* protocol byte */
 4a6:	2a 83       	std	Y+2, r18	; 0x02
    EDC = EDC ^ (*response_APDU).PCB;
    APDU_buffer[2] = (*response_APDU).LEN;    /* length */
 4a8:	4b 83       	std	Y+3, r20	; 0x03
    EDC = EDC ^ (*response_APDU).LEN;
    APDU_buffer[3] = (*response_APDU).data_field[0];
 4aa:	16 96       	adiw	r26, 0x06	; 6
 4ac:	8c 91       	ld	r24, X
 4ae:	8c 83       	std	Y+4, r24	; 0x04
  if ((*response_APDU).PCB > 127) {    /* R- or S-Block */
    EDC = 0;
    APDU_buffer[0] = (*response_APDU).NAD;    /* Network address */
    EDC = EDC ^ (*response_APDU).NAD;
    APDU_buffer[1] = (*response_APDU).PCB;    /* protocol byte */
    EDC = EDC ^ (*response_APDU).PCB;
 4b0:	13 2f       	mov	r17, r19
 4b2:	12 27       	eor	r17, r18
    APDU_buffer[2] = (*response_APDU).LEN;    /* length */
    EDC = EDC ^ (*response_APDU).LEN;
 4b4:	14 27       	eor	r17, r20
    APDU_buffer[3] = (*response_APDU).data_field[0];
    EDC = EDC ^ (*response_APDU).data_field[0];
 4b6:	18 27       	eor	r17, r24
    APDU_buffer[4] = EDC;
 4b8:	1d 83       	std	Y+5, r17	; 0x05
    for (cnt = 0; cnt < 5; cnt++) {
      sendbytet0 (APDU_buffer[cnt]);
 4ba:	83 2f       	mov	r24, r19
 4bc:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 4d2:	81 2f       	mov	r24, r17
 4d4:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 4d8:	46 c0       	rjmp	.+140    	; 0x566 <t1_send_APDU+0xf8>

  }
  else {                        /* I-Block */

    EDC = 0;
    APDU_buffer[0] = (*response_APDU).NAD;    /* Network address */
 4da:	39 83       	std	Y+1, r19	; 0x01
    EDC = EDC ^ (*response_APDU).NAD;
    APDU_buffer[1] = (*response_APDU).PCB;    /* protocol byte */
 4dc:	2a 83       	std	Y+2, r18	; 0x02
    EDC = EDC ^ (*response_APDU).PCB;
    APDU_buffer[2] = (*response_APDU).LEN;    /* length */
 4de:	4b 83       	std	Y+3, r20	; 0x03

    EDC = 0;
    APDU_buffer[0] = (*response_APDU).NAD;    /* Network address */
    EDC = EDC ^ (*response_APDU).NAD;
    APDU_buffer[1] = (*response_APDU).PCB;    /* protocol byte */
    EDC = EDC ^ (*response_APDU).PCB;
 4e0:	63 2f       	mov	r22, r19
 4e2:	62 27       	eor	r22, r18
    APDU_buffer[2] = (*response_APDU).LEN;    /* length */
    EDC = EDC ^ (*response_APDU).LEN;
 4e4:	64 27       	eor	r22, r20

    for (cnt = 0; cnt < (*response_APDU).LE; cnt++) {
 4e6:	fc 01       	movw	r30, r24
 4e8:	85 81       	ldd	r24, Z+5	; 0x05
 4ea:	a8 01       	movw	r20, r16
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	c9 2e       	mov	r12, r25
 4f0:	d1 2c       	mov	r13, r1
 4f2:	cc 0e       	add	r12, r28
 4f4:	dd 1e       	adc	r13, r29
 4f6:	a8 2f       	mov	r26, r24
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	9e 01       	movw	r18, r28
 4fc:	2a 0f       	add	r18, r26
 4fe:	3b 1f       	adc	r19, r27
 500:	2c 5f       	subi	r18, 0xFC	; 252
 502:	3f 4f       	sbci	r19, 0xFF	; 255
 504:	06 c0       	rjmp	.+12     	; 0x512 <t1_send_APDU+0xa4>
      APDU_buffer[3 + cnt] = (*response_APDU).data_field[cnt];
 506:	fa 01       	movw	r30, r20
 508:	85 81       	ldd	r24, Z+5	; 0x05
 50a:	f6 01       	movw	r30, r12
 50c:	81 93       	st	Z+, r24
 50e:	6f 01       	movw	r12, r30
      EDC = EDC ^ (*response_APDU).data_field[cnt];
 510:	68 27       	eor	r22, r24
 512:	4f 5f       	subi	r20, 0xFF	; 255
 514:	5f 4f       	sbci	r21, 0xFF	; 255
    APDU_buffer[1] = (*response_APDU).PCB;    /* protocol byte */
    EDC = EDC ^ (*response_APDU).PCB;
    APDU_buffer[2] = (*response_APDU).LEN;    /* length */
    EDC = EDC ^ (*response_APDU).LEN;

    for (cnt = 0; cnt < (*response_APDU).LE; cnt++) {
 516:	c2 16       	cp	r12, r18
 518:	d3 06       	cpc	r13, r19
 51a:	a9 f7       	brne	.-22     	; 0x506 <t1_send_APDU+0x98>
      APDU_buffer[3 + cnt] = (*response_APDU).data_field[cnt];
      EDC = EDC ^ (*response_APDU).data_field[cnt];
    }
    APDU_buffer[3 + cnt] = (*response_APDU).SW1;    /* status word */
 51c:	f8 01       	movw	r30, r16
 51e:	93 81       	ldd	r25, Z+3	; 0x03
 520:	fe 01       	movw	r30, r28
 522:	ea 0f       	add	r30, r26
 524:	fb 1f       	adc	r31, r27
 526:	94 83       	std	Z+4, r25	; 0x04
    EDC = EDC ^ (*response_APDU).SW1;
    APDU_buffer[4 + cnt] = (*response_APDU).SW2;
 528:	f8 01       	movw	r30, r16
 52a:	84 81       	ldd	r24, Z+4	; 0x04
 52c:	fe 01       	movw	r30, r28
 52e:	ea 0f       	add	r30, r26
 530:	fb 1f       	adc	r31, r27
 532:	85 83       	std	Z+5, r24	; 0x05
    for (cnt = 0; cnt < (*response_APDU).LE; cnt++) {
      APDU_buffer[3 + cnt] = (*response_APDU).data_field[cnt];
      EDC = EDC ^ (*response_APDU).data_field[cnt];
    }
    APDU_buffer[3 + cnt] = (*response_APDU).SW1;    /* status word */
    EDC = EDC ^ (*response_APDU).SW1;
 534:	89 27       	eor	r24, r25
    APDU_buffer[4 + cnt] = (*response_APDU).SW2;
    EDC = EDC ^ (*response_APDU).SW2;
    APDU_buffer[5 + cnt] = EDC;
 536:	86 27       	eor	r24, r22
 538:	86 83       	std	Z+6, r24	; 0x06
 53a:	ff 24       	eor	r15, r15

    for (cnt = 0; cnt < ((*response_APDU).LEN + 4); cnt++)
      sendbytet0 (APDU_buffer[cnt]);
 53c:	6e 01       	movw	r12, r28
 53e:	08 94       	sec
 540:	c1 1c       	adc	r12, r1
 542:	d1 1c       	adc	r13, r1
 544:	06 c0       	rjmp	.+12     	; 0x552 <t1_send_APDU+0xe4>
 546:	ec 0d       	add	r30, r12
 548:	fd 1d       	adc	r31, r13
 54a:	80 81       	ld	r24, Z
 54c:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
    EDC = EDC ^ (*response_APDU).SW1;
    APDU_buffer[4 + cnt] = (*response_APDU).SW2;
    EDC = EDC ^ (*response_APDU).SW2;
    APDU_buffer[5 + cnt] = EDC;

    for (cnt = 0; cnt < ((*response_APDU).LEN + 4); cnt++)
 550:	f3 94       	inc	r15
 552:	ef 2d       	mov	r30, r15
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	d8 01       	movw	r26, r16
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	8c 91       	ld	r24, X
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	03 96       	adiw	r24, 0x03	; 3
 560:	8e 17       	cp	r24, r30
 562:	9f 07       	cpc	r25, r31
 564:	84 f7       	brge	.-32     	; 0x546 <t1_send_APDU+0xd8>
      sendbytet0 (APDU_buffer[cnt]);
  }
}
 566:	c7 5b       	subi	r28, 0xB7	; 183
 568:	df 4f       	sbci	r29, 0xFF	; 255
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	cf 91       	pop	r28
 576:	df 91       	pop	r29
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	df 90       	pop	r13
 580:	cf 90       	pop	r12
 582:	08 95       	ret

00000584 <t1_transmit_ATR>:
 *	@brief	ATR historical bytes definition
 */
const unsigned char ATR_HISTORICAL[ATR_HISTORICAL_SIZE] = { 0x2a, 0x46, 0x49, 0x54, 0x5f, 0x43, 0x56, 0x55, 0x54, 0x2a };

void t1_transmit_ATR( void )
{
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29

  TCK = 0;

  /* calculate TCK */
  for (pos = 1; pos < ATR_SIZE; pos++) {
    TCK ^= ATR[pos];
 58a:	1b e3       	ldi	r17, 0x3B	; 59
 58c:	c6 e6       	ldi	r28, 0x66	; 102
 58e:	d0 e0       	ldi	r29, 0x00	; 0
 590:	fe 01       	movw	r30, r28
  }
  for (pos = 0; pos < ATR_HISTORICAL_SIZE; pos++) {
    TCK ^= ATR_HISTORICAL[pos];
 592:	81 91       	ld	r24, Z+
 594:	18 27       	eor	r17, r24

  /* calculate TCK */
  for (pos = 1; pos < ATR_SIZE; pos++) {
    TCK ^= ATR[pos];
  }
  for (pos = 0; pos < ATR_HISTORICAL_SIZE; pos++) {
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	e0 37       	cpi	r30, 0x70	; 112
 59a:	f8 07       	cpc	r31, r24
 59c:	d1 f7       	brne	.-12     	; 0x592 <t1_transmit_ATR+0xe>
    TCK ^= ATR_HISTORICAL[pos];
  }

  /* send ATR */
  for (pos = 0; pos < ATR_SIZE; pos++) {
    sendbytet0 (ATR[pos]);
 59e:	8b e3       	ldi	r24, 0x3B	; 59
 5a0:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 5a4:	8a eb       	ldi	r24, 0xBA	; 186
 5a6:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 5aa:	81 e1       	ldi	r24, 0x11	; 17
 5ac:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 5b6:	81 e1       	ldi	r24, 0x11	; 17
 5b8:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
 5bc:	81 e8       	ldi	r24, 0x81	; 129
 5be:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>
  }
  for (pos = 0; pos < ATR_HISTORICAL_SIZE; pos++) {
    sendbytet0 (ATR_HISTORICAL[pos]);
 5c2:	89 91       	ld	r24, Y+
 5c4:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>

  /* send ATR */
  for (pos = 0; pos < ATR_SIZE; pos++) {
    sendbytet0 (ATR[pos]);
  }
  for (pos = 0; pos < ATR_HISTORICAL_SIZE; pos++) {
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	c0 37       	cpi	r28, 0x70	; 112
 5cc:	d8 07       	cpc	r29, r24
 5ce:	c9 f7       	brne	.-14     	; 0x5c2 <t1_transmit_ATR+0x3e>
    sendbytet0 (ATR_HISTORICAL[pos]);
  }

  sendbytet0 (TCK);
 5d0:	81 2f       	mov	r24, r17
 5d2:	0e 94 c5 01 	call	0x38a	; 0x38a <sendbytet0>

}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	08 95       	ret

000005de <t1_receive_APDU>:
    
unsigned char t1_receive_APDU( str_command_APDU * command_APDU )
{
 5de:	7f 92       	push	r7
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	df 93       	push	r29
 5f6:	cf 93       	push	r28
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	c9 54       	subi	r28, 0x49	; 73
 5fe:	d0 40       	sbci	r29, 0x00	; 0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	7c 01       	movw	r14, r24
  int cnt;
  unsigned char APDU_buffer[INPUT_BUFFER_SIZE];

  EDC = 0;

  NAD = recbytet0 ();
 60c:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 610:	78 2e       	mov	r7, r24
  PCB = recbytet0 ();
 612:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 616:	88 2e       	mov	r8, r24
  LEN = recbytet0 ();
 618:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 61c:	98 2e       	mov	r9, r24
/**
 *  Check if the length of command APDU is bigger then allocated buffer size
 *
 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 */
  if ( LEN > INPUT_BUFFER_SIZE ) {
 61e:	89 e4       	ldi	r24, 0x49	; 73
 620:	89 15       	cp	r24, r9
 622:	28 f4       	brcc	.+10     	; 0x62e <t1_receive_APDU+0x50>
 624:	00 e0       	ldi	r16, 0x00	; 0
 626:	10 e0       	ldi	r17, 0x00	; 0
    /* receive data, do not save them and exit with error  */
    for ( cnt = 0; cnt < LEN; cnt++ ) {
 628:	c9 2c       	mov	r12, r9
 62a:	dd 24       	eor	r13, r13
 62c:	0c c0       	rjmp	.+24     	; 0x646 <t1_receive_APDU+0x68>
/**
 *  Check if the length of command APDU is bigger then allocated buffer size
 *
 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 */
  if ( LEN > INPUT_BUFFER_SIZE ) {
 62e:	8e 01       	movw	r16, r28
 630:	0f 5f       	subi	r16, 0xFF	; 255
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	68 01       	movw	r12, r16
	(*command_APDU).PCB = PCB;    /* protocol byte */
	(*command_APDU).LEN = LEN;    /* length */
    return T1_RET_ERR_BUFF_INPUT;
  }

  for ( cnt = 0; cnt < LEN; cnt++ ) {
 636:	58 01       	movw	r10, r16
 638:	a9 0c       	add	r10, r9
 63a:	b1 1c       	adc	r11, r1
 63c:	17 c0       	rjmp	.+46     	; 0x66c <t1_receive_APDU+0x8e>
 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 */
  if ( LEN > INPUT_BUFFER_SIZE ) {
    /* receive data, do not save them and exit with error  */
    for ( cnt = 0; cnt < LEN; cnt++ ) {
	  recbytet0 ();
 63e:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 *
 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 */
  if ( LEN > INPUT_BUFFER_SIZE ) {
    /* receive data, do not save them and exit with error  */
    for ( cnt = 0; cnt < LEN; cnt++ ) {
 642:	0f 5f       	subi	r16, 0xFF	; 255
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	0c 15       	cp	r16, r12
 648:	1d 05       	cpc	r17, r13
 64a:	cc f3       	brlt	.-14     	; 0x63e <t1_receive_APDU+0x60>
	  recbytet0 ();
	}
	EDC_IN = recbytet0 ();
 64c:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
	(*command_APDU).NAD = NAD;    /* Network address */
 650:	d7 01       	movw	r26, r14
 652:	7c 92       	st	X, r7
	(*command_APDU).PCB = PCB;    /* protocol byte */
 654:	11 96       	adiw	r26, 0x01	; 1
 656:	8c 92       	st	X, r8
 658:	11 97       	sbiw	r26, 0x01	; 1
	(*command_APDU).LEN = LEN;    /* length */
 65a:	12 96       	adiw	r26, 0x02	; 2
 65c:	9c 92       	st	X, r9
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	68 c0       	rjmp	.+208    	; 0x732 <t1_receive_APDU+0x154>
    return T1_RET_ERR_BUFF_INPUT;
  }

  for ( cnt = 0; cnt < LEN; cnt++ ) {
    APDU_buffer[cnt] = recbytet0 ();
 662:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 666:	f6 01       	movw	r30, r12
 668:	81 93       	st	Z+, r24
 66a:	6f 01       	movw	r12, r30
	(*command_APDU).PCB = PCB;    /* protocol byte */
	(*command_APDU).LEN = LEN;    /* length */
    return T1_RET_ERR_BUFF_INPUT;
  }

  for ( cnt = 0; cnt < LEN; cnt++ ) {
 66c:	ca 14       	cp	r12, r10
 66e:	db 04       	cpc	r13, r11
 670:	c1 f7       	brne	.-16     	; 0x662 <t1_receive_APDU+0x84>
    APDU_buffer[cnt] = recbytet0 ();
  }
  EDC_IN = recbytet0 ();
 672:	0e 94 80 01 	call	0x300	; 0x300 <recbytet0>
 676:	68 2f       	mov	r22, r24

  (*command_APDU).NAD = NAD;    /* Network address */
 678:	d7 01       	movw	r26, r14
 67a:	7c 92       	st	X, r7
  EDC = EDC ^ NAD;
  (*command_APDU).PCB = PCB;    /* protocol byte */
 67c:	11 96       	adiw	r26, 0x01	; 1
 67e:	8c 92       	st	X, r8
 680:	11 97       	sbiw	r26, 0x01	; 1
  EDC = EDC ^ PCB;
  (*command_APDU).LEN = LEN;    /* length */
 682:	12 96       	adiw	r26, 0x02	; 2
 684:	9c 92       	st	X, r9
  EDC_IN = recbytet0 ();

  (*command_APDU).NAD = NAD;    /* Network address */
  EDC = EDC ^ NAD;
  (*command_APDU).PCB = PCB;    /* protocol byte */
  EDC = EDC ^ PCB;
 686:	98 2d       	mov	r25, r8
 688:	97 25       	eor	r25, r7
  (*command_APDU).LEN = LEN;    /* length */
  EDC = EDC ^ LEN;
 68a:	99 25       	eor	r25, r9
 68c:	04 c0       	rjmp	.+8      	; 0x696 <t1_receive_APDU+0xb8>

  for (cnt = 0; cnt < LEN; cnt++) {
    EDC = EDC ^ APDU_buffer[cnt];
 68e:	f8 01       	movw	r30, r16
 690:	81 91       	ld	r24, Z+
 692:	8f 01       	movw	r16, r30
 694:	98 27       	eor	r25, r24
  (*command_APDU).PCB = PCB;    /* protocol byte */
  EDC = EDC ^ PCB;
  (*command_APDU).LEN = LEN;    /* length */
  EDC = EDC ^ LEN;

  for (cnt = 0; cnt < LEN; cnt++) {
 696:	0c 15       	cp	r16, r12
 698:	1d 05       	cpc	r17, r13
 69a:	c9 f7       	brne	.-14     	; 0x68e <t1_receive_APDU+0xb0>
    EDC = EDC ^ APDU_buffer[cnt];
  }

  /* extract APDU */
  (*command_APDU).CLA = APDU_buffer[0];
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	d7 01       	movw	r26, r14
 6a0:	13 96       	adiw	r26, 0x03	; 3
 6a2:	8c 93       	st	X, r24
 6a4:	13 97       	sbiw	r26, 0x03	; 3
  (*command_APDU).INS = APDU_buffer[1];
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	14 96       	adiw	r26, 0x04	; 4
 6aa:	8c 93       	st	X, r24
 6ac:	14 97       	sbiw	r26, 0x04	; 4
  (*command_APDU).P1 = APDU_buffer[2];
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	15 96       	adiw	r26, 0x05	; 5
 6b2:	8c 93       	st	X, r24
 6b4:	15 97       	sbiw	r26, 0x05	; 5
  (*command_APDU).P2 = APDU_buffer[3];
 6b6:	8c 81       	ldd	r24, Y+4	; 0x04
 6b8:	16 96       	adiw	r26, 0x06	; 6
 6ba:	8c 93       	st	X, r24
 6bc:	16 97       	sbiw	r26, 0x06	; 6
  if ((*command_APDU).LEN == 5) {
 6be:	12 96       	adiw	r26, 0x02	; 2
 6c0:	8c 91       	ld	r24, X
 6c2:	12 97       	sbiw	r26, 0x02	; 2
 6c4:	85 30       	cpi	r24, 0x05	; 5
 6c6:	11 f4       	brne	.+4      	; 0x6cc <t1_receive_APDU+0xee>
    (*command_APDU).LE = APDU_buffer[4];    /* ISO7816 case 2 */
 6c8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ca:	28 c0       	rjmp	.+80     	; 0x71c <t1_receive_APDU+0x13e>
  }
  else if ((*command_APDU).LEN > 5) {
 6cc:	86 30       	cpi	r24, 0x06	; 6
 6ce:	40 f1       	brcs	.+80     	; 0x720 <t1_receive_APDU+0x142>
    (*command_APDU).LC = APDU_buffer[4];    /* ISO7816 case 3 or 4 */
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	f7 01       	movw	r30, r14
 6d4:	87 83       	std	Z+7, r24	; 0x07
 6d6:	8e 01       	movw	r16, r28
 6d8:	0a 5f       	subi	r16, 0xFA	; 250
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <t1_receive_APDU+0x110>
    for (cnt = 0; cnt < (*command_APDU).LC; cnt++){
      (*command_APDU).data_field[cnt] = APDU_buffer[5 + cnt];
 6e2:	d8 01       	movw	r26, r16
 6e4:	8d 91       	ld	r24, X+
 6e6:	8d 01       	movw	r16, r26
 6e8:	80 87       	std	Z+8, r24	; 0x08
  if ((*command_APDU).LEN == 5) {
    (*command_APDU).LE = APDU_buffer[4];    /* ISO7816 case 2 */
  }
  else if ((*command_APDU).LEN > 5) {
    (*command_APDU).LC = APDU_buffer[4];    /* ISO7816 case 3 or 4 */
    for (cnt = 0; cnt < (*command_APDU).LC; cnt++){
 6ea:	4f 5f       	subi	r20, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	d7 01       	movw	r26, r14
 6f0:	17 96       	adiw	r26, 0x07	; 7
 6f2:	8c 91       	ld	r24, X
 6f4:	17 97       	sbiw	r26, 0x07	; 7
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	31 96       	adiw	r30, 0x01	; 1
 6fc:	42 17       	cp	r20, r18
 6fe:	53 07       	cpc	r21, r19
 700:	84 f3       	brlt	.-32     	; 0x6e2 <t1_receive_APDU+0x104>
      (*command_APDU).data_field[cnt] = APDU_buffer[5 + cnt];
    }
    if ((*command_APDU).LEN > ((*command_APDU).LC + 5)){
 702:	12 96       	adiw	r26, 0x02	; 2
 704:	8c 91       	ld	r24, X
 706:	12 97       	sbiw	r26, 0x02	; 2
 708:	e8 2f       	mov	r30, r24
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	2b 5f       	subi	r18, 0xFB	; 251
 70e:	3f 4f       	sbci	r19, 0xFF	; 255
 710:	2e 17       	cp	r18, r30
 712:	3f 07       	cpc	r19, r31
 714:	2c f4       	brge	.+10     	; 0x720 <t1_receive_APDU+0x142>
      (*command_APDU).LE = APDU_buffer[(*command_APDU).LEN - 1];    /* ISO7816 case 4 */
 716:	ec 0f       	add	r30, r28
 718:	fd 1f       	adc	r31, r29
 71a:	80 81       	ld	r24, Z
 71c:	18 96       	adiw	r26, 0x08	; 8
 71e:	8c 93       	st	X, r24
/**
 *  Check if the length of response APDU is bigger then allocated output buffer size
 *
 *	BUG FIX Myslivec, Novy 26.02.2015 #buffer_overflow 
 */
  if ( (*command_APDU).LE > OUTPUT_DATA_SIZE ) {
 720:	f7 01       	movw	r30, r14
 722:	80 85       	ldd	r24, Z+8	; 0x08
 724:	81 32       	cpi	r24, 0x21	; 33
 726:	10 f0       	brcs	.+4      	; 0x72c <t1_receive_APDU+0x14e>
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	03 c0       	rjmp	.+6      	; 0x732 <t1_receive_APDU+0x154>
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	96 13       	cpse	r25, r22
 730:	81 e0       	ldi	r24, 0x01	; 1
    return T1_RET_ERR_CHKSM;
  }
  else {
    return T1_RET_OK;
  }
}
 732:	c7 5b       	subi	r28, 0xB7	; 183
 734:	df 4f       	sbci	r29, 0xFF	; 255
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	cf 91       	pop	r28
 742:	df 91       	pop	r29
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	df 90       	pop	r13
 74e:	cf 90       	pop	r12
 750:	bf 90       	pop	r11
 752:	af 90       	pop	r10
 754:	9f 90       	pop	r9
 756:	8f 90       	pop	r8
 758:	7f 90       	pop	r7
 75a:	08 95       	ret

0000075c <crypt_block_prepare_input>:
	encrypt_present_8( &input[0], &output[0], &(input[8]) );
	crypt_block_prepare_output(resp_APDU, 8);
}

void crypt_block_prepare_input ( str_command_APDU * com_APDU )
{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	ec 01       	movw	r28, r24
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0b c0       	rjmp	.+22     	; 0x77c <crypt_block_prepare_input+0x20>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 766:	e9 2f       	mov	r30, r25
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	de 01       	movw	r26, r28
 76c:	ae 0f       	add	r26, r30
 76e:	bf 1f       	adc	r27, r31
 770:	19 96       	adiw	r26, 0x09	; 9
 772:	8c 91       	ld	r24, X
 774:	e6 56       	subi	r30, 0x66	; 102
 776:	ff 4f       	sbci	r31, 0xFF	; 255
 778:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	8f 81       	ldd	r24, Y+7	; 0x07
 77e:	98 17       	cp	r25, r24
 780:	90 f3       	brcs	.-28     	; 0x766 <crypt_block_prepare_input+0xa>
	{
		input[len] = (*com_APDU).data_field[len];
	}
}
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <crypt_block_prepare_output>:

void crypt_block_prepare_output ( str_response_APDU * resp_APDU, unsigned char length )
{
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	ec 01       	movw	r28, r24
	unsigned char len;

	(*resp_APDU).LEN = length + 2; 
 78e:	6e 5f       	subi	r22, 0xFE	; 254
 790:	6a 83       	std	Y+2, r22	; 0x02
 792:	62 50       	subi	r22, 0x02	; 2
	(*resp_APDU).LE = length;
 794:	6d 83       	std	Y+5, r22	; 0x05
  	(*resp_APDU).SW1 = SW1_SUCCESS;  
 796:	80 e9       	ldi	r24, 0x90	; 144
 798:	8b 83       	std	Y+3, r24	; 0x03
  	(*resp_APDU).SW2 = SW2_SUCCESS;
 79a:	1c 82       	std	Y+4, r1	; 0x04
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0b c0       	rjmp	.+22     	; 0x7b6 <crypt_block_prepare_output+0x2e>

	for (len=0; len<(*resp_APDU).LE; len++)
	{
		(*resp_APDU).data_field[len] = output[len];
 7a0:	e9 2f       	mov	r30, r25
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	de 01       	movw	r26, r28
 7a6:	ae 0f       	add	r26, r30
 7a8:	bf 1f       	adc	r27, r31
 7aa:	e6 52       	subi	r30, 0x26	; 38
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	80 81       	ld	r24, Z
 7b0:	16 96       	adiw	r26, 0x06	; 6
 7b2:	8c 93       	st	X, r24
	(*resp_APDU).LEN = length + 2; 
	(*resp_APDU).LE = length;
  	(*resp_APDU).SW1 = SW1_SUCCESS;  
  	(*resp_APDU).SW2 = SW2_SUCCESS;

	for (len=0; len<(*resp_APDU).LE; len++)
 7b4:	9f 5f       	subi	r25, 0xFF	; 255
 7b6:	8d 81       	ldd	r24, Y+5	; 0x05
 7b8:	98 17       	cp	r25, r24
 7ba:	90 f3       	brcs	.-28     	; 0x7a0 <crypt_block_prepare_output+0x18>
	{
		(*resp_APDU).data_field[len] = output[len];
	}
}
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <crypt_present_encrypt_8_key>:
	encrypt_present_8( &input[0], &output[0], 0 );
	crypt_block_prepare_output(resp_APDU, 8);
}

void crypt_present_encrypt_8_key ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	ec 01       	movw	r28, r24
 7cc:	8b 01       	movw	r16, r22
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <crypt_present_encrypt_8_key+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 7d2:	e9 2f       	mov	r30, r25
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	de 01       	movw	r26, r28
 7d8:	ae 0f       	add	r26, r30
 7da:	bf 1f       	adc	r27, r31
 7dc:	19 96       	adiw	r26, 0x09	; 9
 7de:	8c 91       	ld	r24, X
 7e0:	e6 56       	subi	r30, 0x66	; 102
 7e2:	ff 4f       	sbci	r31, 0xFF	; 255
 7e4:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 7e6:	9f 5f       	subi	r25, 0xFF	; 255
 7e8:	8f 81       	ldd	r24, Y+7	; 0x07
 7ea:	98 17       	cp	r25, r24
 7ec:	90 f3       	brcs	.-28     	; 0x7d2 <crypt_present_encrypt_8_key+0x10>
}

void crypt_present_encrypt_8_key ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	encrypt_present_8( &input[0], &output[0], &(input[8]) );
 7ee:	8a e9       	ldi	r24, 0x9A	; 154
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	6a ed       	ldi	r22, 0xDA	; 218
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	42 ea       	ldi	r20, 0xA2	; 162
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	0e 94 88 06 	call	0xd10	; 0xd10 <encrypt_present_8>
	crypt_block_prepare_output(resp_APDU, 8);
 7fe:	c8 01       	movw	r24, r16
 800:	68 e0       	ldi	r22, 0x08	; 8
 802:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	08 95       	ret

00000810 <crypt_present_encrypt_8>:
	decrypt_asm_16(&input[0], &output[0], &key[0]);
	crypt_block_prepare_output(resp_APDU, 16);
}

void crypt_present_encrypt_8 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	ec 01       	movw	r28, r24
 81a:	8b 01       	movw	r16, r22
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0b c0       	rjmp	.+22     	; 0x836 <crypt_present_encrypt_8+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 820:	e9 2f       	mov	r30, r25
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	de 01       	movw	r26, r28
 826:	ae 0f       	add	r26, r30
 828:	bf 1f       	adc	r27, r31
 82a:	19 96       	adiw	r26, 0x09	; 9
 82c:	8c 91       	ld	r24, X
 82e:	e6 56       	subi	r30, 0x66	; 102
 830:	ff 4f       	sbci	r31, 0xFF	; 255
 832:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 834:	9f 5f       	subi	r25, 0xFF	; 255
 836:	8f 81       	ldd	r24, Y+7	; 0x07
 838:	98 17       	cp	r25, r24
 83a:	90 f3       	brcs	.-28     	; 0x820 <crypt_present_encrypt_8+0x10>
}

void crypt_present_encrypt_8 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	encrypt_present_8( &input[0], &output[0], 0 );
 83c:	8a e9       	ldi	r24, 0x9A	; 154
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	6a ed       	ldi	r22, 0xDA	; 218
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	0e 94 88 06 	call	0xd10	; 0xd10 <encrypt_present_8>
	crypt_block_prepare_output(resp_APDU, 8);
 84c:	c8 01       	movw	r24, r16
 84e:	68 e0       	ldi	r22, 0x08	; 8
 850:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	08 95       	ret

0000085e <crypt_asm_decrypt_16>:
	encrypt_asm_16(&input[0], &output[0], &key[0]);
	crypt_block_prepare_output(resp_APDU, 16);
}

void crypt_asm_decrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	ec 01       	movw	r28, r24
 868:	8b 01       	movw	r16, r22
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0b c0       	rjmp	.+22     	; 0x884 <crypt_asm_decrypt_16+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 86e:	e9 2f       	mov	r30, r25
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	de 01       	movw	r26, r28
 874:	ae 0f       	add	r26, r30
 876:	bf 1f       	adc	r27, r31
 878:	19 96       	adiw	r26, 0x09	; 9
 87a:	8c 91       	ld	r24, X
 87c:	e6 56       	subi	r30, 0x66	; 102
 87e:	ff 4f       	sbci	r31, 0xFF	; 255
 880:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	8f 81       	ldd	r24, Y+7	; 0x07
 886:	98 17       	cp	r25, r24
 888:	90 f3       	brcs	.-28     	; 0x86e <crypt_asm_decrypt_16+0x10>
}

void crypt_asm_decrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	decrypt_asm_16(&input[0], &output[0], &key[0]);
 88a:	8a e9       	ldi	r24, 0x9A	; 154
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	6a ed       	ldi	r22, 0xDA	; 218
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	40 e7       	ldi	r20, 0x70	; 112
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	0e 94 53 05 	call	0xaa6	; 0xaa6 <decrypt_asm_16>
	crypt_block_prepare_output(resp_APDU, 16);
 89a:	c8 01       	movw	r24, r16
 89c:	60 e1       	ldi	r22, 0x10	; 16
 89e:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <crypt_asm_encrypt_16>:
	decrypt_c_16(&input[0], &output[0], &key[0]);
	crypt_block_prepare_output(resp_APDU, 16);
}

void crypt_asm_encrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
 8b6:	8b 01       	movw	r16, r22
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <crypt_asm_encrypt_16+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 8bc:	e9 2f       	mov	r30, r25
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	de 01       	movw	r26, r28
 8c2:	ae 0f       	add	r26, r30
 8c4:	bf 1f       	adc	r27, r31
 8c6:	19 96       	adiw	r26, 0x09	; 9
 8c8:	8c 91       	ld	r24, X
 8ca:	e6 56       	subi	r30, 0x66	; 102
 8cc:	ff 4f       	sbci	r31, 0xFF	; 255
 8ce:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 8d0:	9f 5f       	subi	r25, 0xFF	; 255
 8d2:	8f 81       	ldd	r24, Y+7	; 0x07
 8d4:	98 17       	cp	r25, r24
 8d6:	90 f3       	brcs	.-28     	; 0x8bc <crypt_asm_encrypt_16+0x10>
}

void crypt_asm_encrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	encrypt_asm_16(&input[0], &output[0], &key[0]);
 8d8:	8a e9       	ldi	r24, 0x9A	; 154
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	6a ed       	ldi	r22, 0xDA	; 218
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	40 e7       	ldi	r20, 0x70	; 112
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	0e 94 12 05 	call	0xa24	; 0xa24 <encrypt_asm_16>
	crypt_block_prepare_output(resp_APDU, 16);
 8e8:	c8 01       	movw	r24, r16
 8ea:	60 e1       	ldi	r22, 0x10	; 16
 8ec:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	08 95       	ret

000008fa <crypt_c_decrypt_16>:
	encrypt_c_16(&input[0], &output[0], &key[0]);
	crypt_block_prepare_output(resp_APDU, 16);
}

void crypt_c_decrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	ec 01       	movw	r28, r24
 904:	8b 01       	movw	r16, r22
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0b c0       	rjmp	.+22     	; 0x920 <crypt_c_decrypt_16+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 90a:	e9 2f       	mov	r30, r25
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	de 01       	movw	r26, r28
 910:	ae 0f       	add	r26, r30
 912:	bf 1f       	adc	r27, r31
 914:	19 96       	adiw	r26, 0x09	; 9
 916:	8c 91       	ld	r24, X
 918:	e6 56       	subi	r30, 0x66	; 102
 91a:	ff 4f       	sbci	r31, 0xFF	; 255
 91c:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 91e:	9f 5f       	subi	r25, 0xFF	; 255
 920:	8f 81       	ldd	r24, Y+7	; 0x07
 922:	98 17       	cp	r25, r24
 924:	90 f3       	brcs	.-28     	; 0x90a <crypt_c_decrypt_16+0x10>
}

void crypt_c_decrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	decrypt_c_16(&input[0], &output[0], &key[0]);
 926:	8a e9       	ldi	r24, 0x9A	; 154
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	6a ed       	ldi	r22, 0xDA	; 218
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	40 e7       	ldi	r20, 0x70	; 112
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <decrypt_c_16>
	crypt_block_prepare_output(resp_APDU, 16);
 936:	c8 01       	movw	r24, r16
 938:	60 e1       	ldi	r22, 0x10	; 16
 93a:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <crypt_c_encrypt_16>:
/* static unsigned char output[16]; */
static unsigned char output[OUTPUT_DATA_SIZE];


void crypt_c_encrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	ec 01       	movw	r28, r24
 952:	8b 01       	movw	r16, r22
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0b c0       	rjmp	.+22     	; 0x96e <crypt_c_encrypt_16+0x26>
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
	{
		input[len] = (*com_APDU).data_field[len];
 958:	e9 2f       	mov	r30, r25
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	de 01       	movw	r26, r28
 95e:	ae 0f       	add	r26, r30
 960:	bf 1f       	adc	r27, r31
 962:	19 96       	adiw	r26, 0x09	; 9
 964:	8c 91       	ld	r24, X
 966:	e6 56       	subi	r30, 0x66	; 102
 968:	ff 4f       	sbci	r31, 0xFF	; 255
 96a:	80 83       	st	Z, r24
	unsigned char len;
/**
 *  BUG FIX Myslivec, Novy 26.02.2015 #LC_LE
 */
 	/* for (len=0; len<(*com_APDU).LE; len++) */
	for (len=0; len<(*com_APDU).LC; len++)
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	8f 81       	ldd	r24, Y+7	; 0x07
 970:	98 17       	cp	r25, r24
 972:	90 f3       	brcs	.-28     	; 0x958 <crypt_c_encrypt_16+0x10>


void crypt_c_encrypt_16 ( str_command_APDU * com_APDU, str_response_APDU * resp_APDU )
{
	crypt_block_prepare_input(com_APDU);
	encrypt_c_16(&input[0], &output[0], &key[0]);
 974:	8a e9       	ldi	r24, 0x9A	; 154
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	6a ed       	ldi	r22, 0xDA	; 218
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	40 e7       	ldi	r20, 0x70	; 112
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	0e 94 cb 04 	call	0x996	; 0x996 <encrypt_c_16>
	crypt_block_prepare_output(resp_APDU, 16);
 984:	c8 01       	movw	r24, r16
 986:	60 e1       	ldi	r22, 0x10	; 16
 988:	0e 94 c4 03 	call	0x788	; 0x788 <crypt_block_prepare_output>
}
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	08 95       	ret

00000996 <encrypt_c_16>:
 *	clear the trigger PIN
 */
#define clear_pin(port, value) ((port)&=(value))

void encrypt_c_16( unsigned char * input, unsigned char * output, unsigned char * key )
{
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	8c 01       	movw	r16, r24
	unsigned char i;

	// set trigger PIN
	set_pin(DDRB, 0b10100000);
 9a0:	87 b3       	in	r24, 0x17	; 23
 9a2:	80 6a       	ori	r24, 0xA0	; 160
 9a4:	87 bb       	out	0x17, r24	; 23
	set_pin(PORTB, 0b10100000);
 9a6:	88 b3       	in	r24, 0x18	; 24
 9a8:	80 6a       	ori	r24, 0xA0	; 160
 9aa:	88 bb       	out	0x18, r24	; 24
 9ac:	eb 01       	movw	r28, r22
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	30 e0       	ldi	r19, 0x00	; 0

	for (i=0; i<16; i++)
	{
		output[15-i]=input[i] ^ key[i];
 9b2:	fa 01       	movw	r30, r20
 9b4:	e2 0f       	add	r30, r18
 9b6:	f3 1f       	adc	r31, r19
 9b8:	d8 01       	movw	r26, r16
 9ba:	a2 0f       	add	r26, r18
 9bc:	b3 1f       	adc	r27, r19
 9be:	80 81       	ld	r24, Z
 9c0:	9c 91       	ld	r25, X
 9c2:	89 27       	eor	r24, r25
 9c4:	8f 87       	std	Y+15, r24	; 0x0f
 9c6:	2f 5f       	subi	r18, 0xFF	; 255
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ca:	21 97       	sbiw	r28, 0x01	; 1

	// set trigger PIN
	set_pin(DDRB, 0b10100000);
	set_pin(PORTB, 0b10100000);

	for (i=0; i<16; i++)
 9cc:	20 31       	cpi	r18, 0x10	; 16
 9ce:	31 05       	cpc	r19, r1
 9d0:	81 f7       	brne	.-32     	; 0x9b2 <encrypt_c_16+0x1c>
	{
		output[15-i]=input[i] ^ key[i];
	}

	// clear trigger PIN
	clear_pin(PORTB, 0b01011111);
 9d2:	88 b3       	in	r24, 0x18	; 24
 9d4:	8f 75       	andi	r24, 0x5F	; 95
 9d6:	88 bb       	out	0x18, r24	; 24
}
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret

000009e2 <decrypt_c_16>:

void decrypt_c_16( unsigned char * input, unsigned char * output, unsigned char * key )
{
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
	unsigned char i;

	// set trigger PIN
	set_pin(DDRB, 0b10100000);
 9e6:	27 b3       	in	r18, 0x17	; 23
 9e8:	20 6a       	ori	r18, 0xA0	; 160
 9ea:	27 bb       	out	0x17, r18	; 23
	set_pin(PORTB, 0b10100000);
 9ec:	28 b3       	in	r18, 0x18	; 24
 9ee:	20 6a       	ori	r18, 0xA0	; 160
 9f0:	28 bb       	out	0x18, r18	; 24
 9f2:	ec 01       	movw	r28, r24
 9f4:	20 e0       	ldi	r18, 0x00	; 0
 9f6:	30 e0       	ldi	r19, 0x00	; 0

	for (i=0; i<16; i++)
	{
		output[i]=input[15-i] ^ key[i];
 9f8:	db 01       	movw	r26, r22
 9fa:	a2 0f       	add	r26, r18
 9fc:	b3 1f       	adc	r27, r19
 9fe:	fa 01       	movw	r30, r20
 a00:	e2 0f       	add	r30, r18
 a02:	f3 1f       	adc	r31, r19
 a04:	80 81       	ld	r24, Z
 a06:	9f 85       	ldd	r25, Y+15	; 0x0f
 a08:	89 27       	eor	r24, r25
 a0a:	8c 93       	st	X, r24
 a0c:	2f 5f       	subi	r18, 0xFF	; 255
 a0e:	3f 4f       	sbci	r19, 0xFF	; 255
 a10:	21 97       	sbiw	r28, 0x01	; 1

	// set trigger PIN
	set_pin(DDRB, 0b10100000);
	set_pin(PORTB, 0b10100000);

	for (i=0; i<16; i++)
 a12:	20 31       	cpi	r18, 0x10	; 16
 a14:	31 05       	cpc	r19, r1
 a16:	81 f7       	brne	.-32     	; 0x9f8 <decrypt_c_16+0x16>
	{
		output[i]=input[15-i] ^ key[i];
	}

	// clear trigger PIN
	clear_pin(PORTB, 0b01011111);
 a18:	88 b3       	in	r24, 0x18	; 24
 a1a:	8f 75       	andi	r24, 0x5F	; 95
 a1c:	88 bb       	out	0x18, r24	; 24
}
 a1e:	df 91       	pop	r29
 a20:	cf 91       	pop	r28
 a22:	08 95       	ret

00000a24 <encrypt_asm_16>:

.global	encrypt_asm_16
.type	encrypt_asm_16,@function
encrypt_asm_16:

	push r2
 a24:	2f 92       	push	r2
	push r3
 a26:	3f 92       	push	r3
	push r4
 a28:	4f 92       	push	r4
	push r5
 a2a:	5f 92       	push	r5
	push r6
 a2c:	6f 92       	push	r6
	push r7
 a2e:	7f 92       	push	r7
	push r8
 a30:	8f 92       	push	r8
	push r9
 a32:	9f 92       	push	r9
	push r10
 a34:	af 92       	push	r10
	push r11
 a36:	bf 92       	push	r11
	push r12
 a38:	cf 92       	push	r12
	push r13
 a3a:	df 92       	push	r13
	push r14
 a3c:	ef 92       	push	r14
	push r15
 a3e:	ff 92       	push	r15
	push r16
 a40:	0f 93       	push	r16
	push r17
 a42:	1f 93       	push	r17
	push r28
 a44:	cf 93       	push	r28
	push r29
 a46:	df 93       	push	r29
    push r30
 a48:	ef 93       	push	r30
    push r31
 a4a:	ff 93       	push	r31

	; X
	mov r27, r25	; input HIGH
 a4c:	b9 2f       	mov	r27, r25
	mov r26, r24	; input LOW
 a4e:	a8 2f       	mov	r26, r24
	; Y
	mov r29, r23	; output HIGH
 a50:	d7 2f       	mov	r29, r23
	mov r28, r22	; output LOW
 a52:	c6 2f       	mov	r28, r22
	; Z
	mov r31, r21	; key HIGH
 a54:	f5 2f       	mov	r31, r21
	mov	r30, r20	; key LOW
 a56:	e4 2f       	mov	r30, r20

	; set trigger pin
	sbi 0x17,5
 a58:	bd 9a       	sbi	0x17, 5	; 23
	sbi 0x17,7
 a5a:	bf 9a       	sbi	0x17, 7	; 23

	sbi 0x18,5
 a5c:	c5 9a       	sbi	0x18, 5	; 24
	sbi 0x18,7
 a5e:	c7 9a       	sbi	0x18, 7	; 24

	ldi	r16, 16
 a60:	00 e1       	ldi	r16, 0x10	; 16
	clr	r17
 a62:	11 27       	eor	r17, r17
	add	r28, r16
 a64:	c0 0f       	add	r28, r16
	adc	r29, r17
 a66:	d1 1f       	adc	r29, r17
	ldi	r18, 16
 a68:	20 e1       	ldi	r18, 0x10	; 16

00000a6a <encrypt_loop>:

encrypt_loop:
	ld		r16, X+
 a6a:	0d 91       	ld	r16, X+
	ld		r17, Z+
 a6c:	11 91       	ld	r17, Z+
	eor		r16, r17
 a6e:	01 27       	eor	r16, r17
	st		-Y, r16
 a70:	0a 93       	st	-Y, r16
	dec		r18
 a72:	2a 95       	dec	r18
	brne	encrypt_loop
 a74:	d1 f7       	brne	.-12     	; 0xa6a <encrypt_loop>

	; clear trigger pin
	cbi 0x18,5
 a76:	c5 98       	cbi	0x18, 5	; 24
	cbi 0x18,7
 a78:	c7 98       	cbi	0x18, 7	; 24

    pop r31
 a7a:	ff 91       	pop	r31
    pop r30
 a7c:	ef 91       	pop	r30
	pop r29
 a7e:	df 91       	pop	r29
	pop r28
 a80:	cf 91       	pop	r28
	pop r17
 a82:	1f 91       	pop	r17
	pop r16
 a84:	0f 91       	pop	r16
	pop r15
 a86:	ff 90       	pop	r15
	pop r14
 a88:	ef 90       	pop	r14
	pop r13
 a8a:	df 90       	pop	r13
	pop r12
 a8c:	cf 90       	pop	r12
	pop r11
 a8e:	bf 90       	pop	r11
	pop r10
 a90:	af 90       	pop	r10
	pop r9
 a92:	9f 90       	pop	r9
	pop r8
 a94:	8f 90       	pop	r8
	pop r7
 a96:	7f 90       	pop	r7
	pop r6
 a98:	6f 90       	pop	r6
	pop r5
 a9a:	5f 90       	pop	r5
	pop r4
 a9c:	4f 90       	pop	r4
	pop r3
 a9e:	3f 90       	pop	r3
	pop r2
 aa0:	2f 90       	pop	r2
	clr r1
 aa2:	11 24       	eor	r1, r1

    ret
 aa4:	08 95       	ret

00000aa6 <decrypt_asm_16>:

.global	decrypt_asm_16
.type	decrypt_asm_16,@function
decrypt_asm_16:

	push r2
 aa6:	2f 92       	push	r2
	push r3
 aa8:	3f 92       	push	r3
	push r4
 aaa:	4f 92       	push	r4
	push r5
 aac:	5f 92       	push	r5
	push r6
 aae:	6f 92       	push	r6
	push r7
 ab0:	7f 92       	push	r7
	push r8
 ab2:	8f 92       	push	r8
	push r9
 ab4:	9f 92       	push	r9
	push r10
 ab6:	af 92       	push	r10
	push r11
 ab8:	bf 92       	push	r11
	push r12
 aba:	cf 92       	push	r12
	push r13
 abc:	df 92       	push	r13
	push r14
 abe:	ef 92       	push	r14
	push r15
 ac0:	ff 92       	push	r15
	push r16
 ac2:	0f 93       	push	r16
	push r17
 ac4:	1f 93       	push	r17
	push r28
 ac6:	cf 93       	push	r28
	push r29
 ac8:	df 93       	push	r29
    push r30
 aca:	ef 93       	push	r30
    push r31
 acc:	ff 93       	push	r31

	; X
	mov r26, r24	; input LOW
 ace:	a8 2f       	mov	r26, r24
	mov r27, r25	; input HIGH
 ad0:	b9 2f       	mov	r27, r25
	; Y
	mov r28, r22	; output LOW
 ad2:	c6 2f       	mov	r28, r22
	mov r29, r23	; output HIGH
 ad4:	d7 2f       	mov	r29, r23
	; Z
	mov	r30, r20	; key LOW
 ad6:	e4 2f       	mov	r30, r20
	mov r31, r21	; key HIGH
 ad8:	f5 2f       	mov	r31, r21

	; set trigger pin
	sbi 0x17,5
 ada:	bd 9a       	sbi	0x17, 5	; 23
	sbi 0x17,7
 adc:	bf 9a       	sbi	0x17, 7	; 23

	sbi 0x18,5
 ade:	c5 9a       	sbi	0x18, 5	; 24
	sbi 0x18,7
 ae0:	c7 9a       	sbi	0x18, 7	; 24


	ldi	r16, 16
 ae2:	00 e1       	ldi	r16, 0x10	; 16
	clr	r17
 ae4:	11 27       	eor	r17, r17
	add	r26, r16
 ae6:	a0 0f       	add	r26, r16
	adc	r27, r17
 ae8:	b1 1f       	adc	r27, r17
	ldi	r18, 16
 aea:	20 e1       	ldi	r18, 0x10	; 16

00000aec <decrypt_loop>:

decrypt_loop:
	ld		r16, -X
 aec:	0e 91       	ld	r16, -X
	ld		r17, Z+
 aee:	11 91       	ld	r17, Z+
	eor		r16, r17
 af0:	01 27       	eor	r16, r17
	st		Y+, r16
 af2:	09 93       	st	Y+, r16
	dec		r18
 af4:	2a 95       	dec	r18
	brne	decrypt_loop
 af6:	d1 f7       	brne	.-12     	; 0xaec <decrypt_loop>

	; clear trigger pin
	cbi 0x18,5
 af8:	c5 98       	cbi	0x18, 5	; 24
	cbi 0x18,7
 afa:	c7 98       	cbi	0x18, 7	; 24

    pop r31
 afc:	ff 91       	pop	r31
    pop r30
 afe:	ef 91       	pop	r30
	pop r29
 b00:	df 91       	pop	r29
	pop r28
 b02:	cf 91       	pop	r28
	pop r17
 b04:	1f 91       	pop	r17
	pop r16
 b06:	0f 91       	pop	r16
	pop r15
 b08:	ff 90       	pop	r15
	pop r14
 b0a:	ef 90       	pop	r14
	pop r13
 b0c:	df 90       	pop	r13
	pop r12
 b0e:	cf 90       	pop	r12
	pop r11
 b10:	bf 90       	pop	r11
	pop r10
 b12:	af 90       	pop	r10
	pop r9
 b14:	9f 90       	pop	r9
	pop r8
 b16:	8f 90       	pop	r8
	pop r7
 b18:	7f 90       	pop	r7
	pop r6
 b1a:	6f 90       	pop	r6
	pop r5
 b1c:	5f 90       	pop	r5
	pop r4
 b1e:	4f 90       	pop	r4
	pop r3
 b20:	3f 90       	pop	r3
	pop r2
 b22:	2f 90       	pop	r2
	clr r1
 b24:	11 24       	eor	r1, r1

    ret
 b26:	08 95       	ret

00000b28 <pridejRundovniKlic>:
static unsigned char vychoziKlic[KLIC_VELIKOST] = { 0x7f, 0xf2, 0x38, 0xa4, 0x45, 0x39, 0x0d, 0x4e, 0x72, 0x3e };
static unsigned char vychoziKlic[KLIC_VELIKOST] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static unsigned char vychoziKlic[KLIC_VELIKOST] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
*/

void pridejRundovniKlic( unsigned char * zprava, unsigned char * klic ) {
 b28:	dc 01       	movw	r26, r24
 b2a:	fb 01       	movw	r30, r22
 b2c:	20 e0       	ldi	r18, 0x00	; 0
   unsigned char i;
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
      /* xor s rund. klicem */
      /* index u klice je +2 protoze se z 80-ti bitu pouziva 64 nejvyznamnejsich */
      /* melo by byt + KLIC_VELIKOST - BLOK_VELIKOST ... */
      zprava[i] = zprava[i] ^ klic[i + 2];
 b2e:	8c 91       	ld	r24, X
 b30:	92 81       	ldd	r25, Z+2	; 0x02
 b32:	89 27       	eor	r24, r25
 b34:	8d 93       	st	X+, r24
static unsigned char vychoziKlic[KLIC_VELIKOST] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
*/

void pridejRundovniKlic( unsigned char * zprava, unsigned char * klic ) {
   unsigned char i;
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 b36:	2f 5f       	subi	r18, 0xFF	; 255
 b38:	31 96       	adiw	r30, 0x01	; 1
 b3a:	28 30       	cpi	r18, 0x08	; 8
 b3c:	c1 f7       	brne	.-16     	; 0xb2e <pridejRundovniKlic+0x6>
      /* xor s rund. klicem */
      /* index u klice je +2 protoze se z 80-ti bitu pouziva 64 nejvyznamnejsich */
      /* melo by byt + KLIC_VELIKOST - BLOK_VELIKOST ... */
      zprava[i] = zprava[i] ^ klic[i + 2];
   }
}
 b3e:	08 95       	ret

00000b40 <substitucniVrstva>:

void substitucniVrstva( unsigned char * zprava ) {
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	ec 01       	movw	r28, r24
 b46:	20 e0       	ldi	r18, 0x00	; 0
   unsigned char i;
   unsigned char nibble1, nibble2;
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
      /* mene vyznamne 4 bity */
      nibble1 = 0x0F & zprava[i];
 b48:	a8 81       	ld	r26, Y
      /* vice vyznamne 4 bity */
      nibble2 = 0x0F & ( zprava[i] >> 4 );  /* maskovani neni potreba, ale ... */

      /* 4-bitove vystupy sBoxu */
      nibble1 = sBox[nibble1] & 0x0F;        /* maskovani neni potreba, ale ... */
 b4a:	ea 2f       	mov	r30, r26
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	ef 70       	andi	r30, 0x0F	; 15
 b50:	f0 70       	andi	r31, 0x00	; 0
 b52:	e6 57       	subi	r30, 0x76	; 118
 b54:	ff 4f       	sbci	r31, 0xFF	; 255
 b56:	90 81       	ld	r25, Z
      nibble2 = sBox[nibble2] & 0x0F;        /* maskovani neni potreba, ale ... */
 b58:	a2 95       	swap	r26
 b5a:	af 70       	andi	r26, 0x0F	; 15
 b5c:	b0 e0       	ldi	r27, 0x00	; 0
 b5e:	a6 57       	subi	r26, 0x76	; 118
 b60:	bf 4f       	sbci	r27, 0xFF	; 255
 b62:	8c 91       	ld	r24, X

      /* rekonstrukce puvodniho bajtu zpravy -- substituce bajtu */
      nibble2 = ( nibble2 << 4 ) & 0xF0;     /* maskovani neni potreba, ale ... */
 b64:	82 95       	swap	r24
 b66:	80 7f       	andi	r24, 0xF0	; 240
      zprava[i] = nibble2 | nibble1;
 b68:	9f 70       	andi	r25, 0x0F	; 15
 b6a:	89 2b       	or	r24, r25
 b6c:	89 93       	st	Y+, r24
}

void substitucniVrstva( unsigned char * zprava ) {
   unsigned char i;
   unsigned char nibble1, nibble2;
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	28 30       	cpi	r18, 0x08	; 8
 b72:	51 f7       	brne	.-44     	; 0xb48 <substitucniVrstva+0x8>

      /* rekonstrukce puvodniho bajtu zpravy -- substituce bajtu */
      nibble2 = ( nibble2 << 4 ) & 0xF0;     /* maskovani neni potreba, ale ... */
      zprava[i] = nibble2 | nibble1;
   }
}
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	08 95       	ret

00000b7a <permutacniVrstva>:

void permutacniVrstva( unsigned char * zprava ) {
 b7a:	cf 92       	push	r12
 b7c:	df 92       	push	r13
 b7e:	ef 92       	push	r14
 b80:	ff 92       	push	r15
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	df 93       	push	r29
 b88:	cf 93       	push	r28
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	28 97       	sbiw	r28, 0x08	; 8
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	7c 01       	movw	r14, r24
 b9c:	fe 01       	movw	r30, r28
 b9e:	31 96       	adiw	r30, 0x01	; 1
   unsigned char zdrojPozice, zdrojIndex, zdrojOffset;
   unsigned char   cilPozice,   cilIndex,   cilOffset;
   unsigned char i, bit, permutace[BLOK_VELIKOST];
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 ba0:	ce 01       	movw	r24, r28
 ba2:	09 96       	adiw	r24, 0x09	; 9
      permutace[i] = 0;
 ba4:	11 92       	st	Z+, r1

void permutacniVrstva( unsigned char * zprava ) {
   unsigned char zdrojPozice, zdrojIndex, zdrojOffset;
   unsigned char   cilPozice,   cilIndex,   cilOffset;
   unsigned char i, bit, permutace[BLOK_VELIKOST];
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 ba6:	e8 17       	cp	r30, r24
 ba8:	f9 07       	cpc	r31, r25
 baa:	e1 f7       	brne	.-8      	; 0xba4 <permutacniVrstva+0x2a>
 bac:	40 e0       	ldi	r20, 0x00	; 0
 bae:	00 e0       	ldi	r16, 0x00	; 0
 bb0:	10 e0       	ldi	r17, 0x00	; 0
      cilIndex    =   cilPozice / 8;
      cilOffset   =   cilPozice % 8;

      bit = ( zprava[zdrojIndex] >> zdrojOffset ) & 0x01;
      bit = bit << cilOffset;
      permutace[cilIndex] |= bit;
 bb2:	6e 01       	movw	r12, r28
 bb4:	08 94       	sec
 bb6:	c1 1c       	adc	r12, r1
 bb8:	d1 1c       	adc	r13, r1
   }

   /* cyklus pres vsechny bity zpravy */
   /* TODO pro prehlednost pocitam rovnou s cislem 63 misto s konstantou BITU_POCET - 1  */
   for ( zdrojPozice = 0 ; zdrojPozice < BITU_POCET ; zdrojPozice++ ) {
      if ( zdrojPozice == 63 ) /* vyjimka */
 bba:	4f 33       	cpi	r20, 0x3F	; 63
 bbc:	11 f4       	brne	.+4      	; 0xbc2 <permutacniVrstva+0x48>
 bbe:	3f e3       	ldi	r19, 0x3F	; 63
 bc0:	0f c0       	rjmp	.+30     	; 0xbe0 <permutacniVrstva+0x66>
         cilPozice = 63;
      else {
         /* algebraicke vyjadreni permutacni vrstvy, inspirovano z [2] */
         /* schvalne vypocet na dvakrat, aby bylo zajisteno, ze se vejde do 8-bitu  */
         cilPozice = ( 4 * zdrojPozice ) % 63;
         cilPozice = ( 4 *   cilPozice ) % 63;
 bc2:	c8 01       	movw	r24, r16
 bc4:	6f e3       	ldi	r22, 0x3F	; 63
 bc6:	70 e0       	ldi	r23, 0x00	; 0
 bc8:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodhi4>
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	88 0f       	add	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	88 0f       	add	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	6f e3       	ldi	r22, 0x3F	; 63
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodhi4>
 bde:	38 2f       	mov	r19, r24
      zdrojOffset = zdrojPozice % 8;
      cilIndex    =   cilPozice / 8;
      cilOffset   =   cilPozice % 8;

      bit = ( zprava[zdrojIndex] >> zdrojOffset ) & 0x01;
      bit = bit << cilOffset;
 be0:	84 2f       	mov	r24, r20
 be2:	86 95       	lsr	r24
 be4:	86 95       	lsr	r24
 be6:	86 95       	lsr	r24
 be8:	f7 01       	movw	r30, r14
 bea:	e8 0f       	add	r30, r24
 bec:	f1 1d       	adc	r31, r1
 bee:	80 81       	ld	r24, Z
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	24 2f       	mov	r18, r20
 bf4:	27 70       	andi	r18, 0x07	; 7
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <permutacniVrstva+0x82>
 bf8:	95 95       	asr	r25
 bfa:	87 95       	ror	r24
 bfc:	2a 95       	dec	r18
 bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <permutacniVrstva+0x7e>
 c00:	81 70       	andi	r24, 0x01	; 1
 c02:	23 2f       	mov	r18, r19
 c04:	27 70       	andi	r18, 0x07	; 7
 c06:	01 c0       	rjmp	.+2      	; 0xc0a <permutacniVrstva+0x90>
 c08:	88 0f       	add	r24, r24
 c0a:	2a 95       	dec	r18
 c0c:	ea f7       	brpl	.-6      	; 0xc08 <permutacniVrstva+0x8e>
      permutace[cilIndex] |= bit;
 c0e:	36 95       	lsr	r19
 c10:	36 95       	lsr	r19
 c12:	36 95       	lsr	r19
 c14:	f6 01       	movw	r30, r12
 c16:	e3 0f       	add	r30, r19
 c18:	f1 1d       	adc	r31, r1
 c1a:	20 81       	ld	r18, Z
 c1c:	82 2b       	or	r24, r18
 c1e:	80 83       	st	Z, r24
      permutace[i] = 0;
   }

   /* cyklus pres vsechny bity zpravy */
   /* TODO pro prehlednost pocitam rovnou s cislem 63 misto s konstantou BITU_POCET - 1  */
   for ( zdrojPozice = 0 ; zdrojPozice < BITU_POCET ; zdrojPozice++ ) {
 c20:	4f 5f       	subi	r20, 0xFF	; 255
 c22:	0c 5f       	subi	r16, 0xFC	; 252
 c24:	1f 4f       	sbci	r17, 0xFF	; 255
 c26:	40 34       	cpi	r20, 0x40	; 64
 c28:	41 f6       	brne	.-112    	; 0xbba <permutacniVrstva+0x40>
 c2a:	20 e0       	ldi	r18, 0x00	; 0
 c2c:	30 e0       	ldi	r19, 0x00	; 0
      permutace[cilIndex] |= bit;
   }

   /* nahrada zpravy permutaci */
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
      zprava[i] = permutace[i];
 c2e:	ae 01       	movw	r20, r28
 c30:	4f 5f       	subi	r20, 0xFF	; 255
 c32:	5f 4f       	sbci	r21, 0xFF	; 255
 c34:	f7 01       	movw	r30, r14
 c36:	e2 0f       	add	r30, r18
 c38:	f3 1f       	adc	r31, r19
 c3a:	da 01       	movw	r26, r20
 c3c:	a2 0f       	add	r26, r18
 c3e:	b3 1f       	adc	r27, r19
 c40:	8c 91       	ld	r24, X
 c42:	80 83       	st	Z, r24
 c44:	2f 5f       	subi	r18, 0xFF	; 255
 c46:	3f 4f       	sbci	r19, 0xFF	; 255
      bit = bit << cilOffset;
      permutace[cilIndex] |= bit;
   }

   /* nahrada zpravy permutaci */
   for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 c48:	28 30       	cpi	r18, 0x08	; 8
 c4a:	31 05       	cpc	r19, r1
 c4c:	99 f7       	brne	.-26     	; 0xc34 <permutacniVrstva+0xba>
      zprava[i] = permutace[i];
   }
}
 c4e:	28 96       	adiw	r28, 0x08	; 8
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	f8 94       	cli
 c54:	de bf       	out	0x3e, r29	; 62
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	cd bf       	out	0x3d, r28	; 61
 c5a:	cf 91       	pop	r28
 c5c:	df 91       	pop	r29
 c5e:	1f 91       	pop	r17
 c60:	0f 91       	pop	r16
 c62:	ff 90       	pop	r15
 c64:	ef 90       	pop	r14
 c66:	df 90       	pop	r13
 c68:	cf 90       	pop	r12
 c6a:	08 95       	ret

00000c6c <generujRundovniKlic>:

void generujRundovniKlic( unsigned char * klic, unsigned char runda ) {
 c6c:	cf 93       	push	r28
 c6e:	df 93       	push	r29
 c70:	dc 01       	movw	r26, r24
   unsigned char i, bajt1, bajt2, cast1, cast2;
   /* 61-bitovy posun doleva (rol) ----------------------------------------- */
   /* jedna se vlastne o 19-bitovy posun doprava (ror) */
   
   /* nejdriv posun klice o dva bajty = 16 bitu*/
   bajt1 = klic[0];
 c72:	3c 91       	ld	r19, X
   bajt2 = klic[1];
 c74:	11 96       	adiw	r26, 0x01	; 1
 c76:	2c 91       	ld	r18, X
 c78:	11 97       	sbiw	r26, 0x01	; 1
 c7a:	ec 01       	movw	r28, r24
 c7c:	fc 01       	movw	r30, r24
 c7e:	90 e0       	ldi	r25, 0x00	; 0
   for ( i = 0 ; i < KLIC_VELIKOST - 2 ; i++ ) {
      klic[i] = klic[i + 2];
 c80:	82 81       	ldd	r24, Z+2	; 0x02
 c82:	81 93       	st	Z+, r24
   /* jedna se vlastne o 19-bitovy posun doprava (ror) */
   
   /* nejdriv posun klice o dva bajty = 16 bitu*/
   bajt1 = klic[0];
   bajt2 = klic[1];
   for ( i = 0 ; i < KLIC_VELIKOST - 2 ; i++ ) {
 c84:	9f 5f       	subi	r25, 0xFF	; 255
 c86:	98 30       	cpi	r25, 0x08	; 8
 c88:	d9 f7       	brne	.-10     	; 0xc80 <generujRundovniKlic+0x14>
      klic[i] = klic[i + 2];
   }
   klic[KLIC_VELIKOST - 2] = bajt1;
 c8a:	18 96       	adiw	r26, 0x08	; 8
 c8c:	3c 93       	st	X, r19
 c8e:	18 97       	sbiw	r26, 0x08	; 8
   klic[KLIC_VELIKOST - 1] = bajt2;
 c90:	19 96       	adiw	r26, 0x09	; 9
 c92:	2c 93       	st	X, r18
 c94:	19 97       	sbiw	r26, 0x09	; 9
   
   /* posun klice o dalsi 3 bity */
   bajt1 = klic[0];
 c96:	3c 91       	ld	r19, X
 c98:	20 e0       	ldi	r18, 0x00	; 0
   for ( i = 0 ; i < KLIC_VELIKOST - 1 ; i++ ) {
      cast1 = (     klic[i] >> 3 ) & 0x1F;  /* maskovani neni potreba, ale ... */
      cast2 = ( klic[i + 1] << 5 ) & 0xE0;  /* maskovani neni potreba, ale ... */
      klic[i] = cast1 | cast2;
 c9a:	99 81       	ldd	r25, Y+1	; 0x01
 c9c:	92 95       	swap	r25
 c9e:	99 0f       	add	r25, r25
 ca0:	90 7e       	andi	r25, 0xE0	; 224
 ca2:	88 81       	ld	r24, Y
 ca4:	86 95       	lsr	r24
 ca6:	86 95       	lsr	r24
 ca8:	86 95       	lsr	r24
 caa:	98 2b       	or	r25, r24
 cac:	99 93       	st	Y+, r25
   klic[KLIC_VELIKOST - 2] = bajt1;
   klic[KLIC_VELIKOST - 1] = bajt2;
   
   /* posun klice o dalsi 3 bity */
   bajt1 = klic[0];
   for ( i = 0 ; i < KLIC_VELIKOST - 1 ; i++ ) {
 cae:	2f 5f       	subi	r18, 0xFF	; 255
 cb0:	29 30       	cpi	r18, 0x09	; 9
 cb2:	99 f7       	brne	.-26     	; 0xc9a <generujRundovniKlic+0x2e>
      cast2 = ( klic[i + 1] << 5 ) & 0xE0;  /* maskovani neni potreba, ale ... */
      klic[i] = cast1 | cast2;
   }
   cast1 = ( klic[KLIC_VELIKOST - 1] >> 3 ) & 0x1F;  /* maskovani neni potreba, ale ... */
   cast2 = (                   bajt1 << 5 ) & 0xE0;  /* maskovani neni potreba, ale ... */
   klic[KLIC_VELIKOST - 1] = cast1 | cast2;
 cb4:	93 2f       	mov	r25, r19
 cb6:	92 95       	swap	r25
 cb8:	99 0f       	add	r25, r25
 cba:	90 7e       	andi	r25, 0xE0	; 224
 cbc:	19 96       	adiw	r26, 0x09	; 9
 cbe:	8c 91       	ld	r24, X
 cc0:	19 97       	sbiw	r26, 0x09	; 9
 cc2:	86 95       	lsr	r24
 cc4:	86 95       	lsr	r24
 cc6:	86 95       	lsr	r24
 cc8:	98 2b       	or	r25, r24
   /* sBox substituce nejvyznamnejsi 4 bity -------------------------------- */
   /* nizsi 4 bity zustanou stejne */
   cast1 =   klic[KLIC_VELIKOST - 1] & 0x0F;
   /* vyssi 4 bity */
   cast2 = ( klic[KLIC_VELIKOST - 1] >> 4 ) & 0x0F;  /* maskovani neni potreba, ale ... */
   cast2 = sBox[cast2];
 cca:	e9 2f       	mov	r30, r25
 ccc:	e2 95       	swap	r30
 cce:	ef 70       	andi	r30, 0x0F	; 15
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	e6 57       	subi	r30, 0x76	; 118
 cd4:	ff 4f       	sbci	r31, 0xFF	; 255
 cd6:	80 81       	ld	r24, Z
   cast2 = ( cast2 << 4 ) & 0xF0;     /* maskovani neni potreba, ale ... */
 cd8:	82 95       	swap	r24
 cda:	80 7f       	andi	r24, 0xF0	; 240
   cast2 = (                   bajt1 << 5 ) & 0xE0;  /* maskovani neni potreba, ale ... */
   klic[KLIC_VELIKOST - 1] = cast1 | cast2;

   /* sBox substituce nejvyznamnejsi 4 bity -------------------------------- */
   /* nizsi 4 bity zustanou stejne */
   cast1 =   klic[KLIC_VELIKOST - 1] & 0x0F;
 cdc:	9f 70       	andi	r25, 0x0F	; 15
   /* vyssi 4 bity */
   cast2 = ( klic[KLIC_VELIKOST - 1] >> 4 ) & 0x0F;  /* maskovani neni potreba, ale ... */
   cast2 = sBox[cast2];
   cast2 = ( cast2 << 4 ) & 0xF0;     /* maskovani neni potreba, ale ... */

   klic[KLIC_VELIKOST - 1] = cast1 | cast2;
 cde:	89 2b       	or	r24, r25
 ce0:	19 96       	adiw	r26, 0x09	; 9
 ce2:	8c 93       	st	X, r24
 ce4:	19 97       	sbiw	r26, 0x09	; 9
   
   /* xor cisla rundy ------------------------------------------------------ */
   /* (runda je cislovana dle C od 0, musi se tedy pricist 1 ) */
   cast1 = runda + 1;
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
   /* nejnizsi bit cisla rundy je xorovan s nejvyssim bitem 2. bajtu */
   if ( ( cast1 & 0x01 ) == 1 )
 ce8:	60 ff       	sbrs	r22, 0
 cea:	07 c0       	rjmp	.+14     	; 0xcfa <generujRundovniKlic+0x8e>
      klic[1] = klic[1] ^ 0x80; 
 cec:	11 96       	adiw	r26, 0x01	; 1
 cee:	8c 91       	ld	r24, X
 cf0:	11 97       	sbiw	r26, 0x01	; 1
 cf2:	80 58       	subi	r24, 0x80	; 128
 cf4:	11 96       	adiw	r26, 0x01	; 1
 cf6:	8c 93       	st	X, r24
 cf8:	11 97       	sbiw	r26, 0x01	; 1

   /* 4 nejvyssi bity (tedy krome jednoho) cisla rundy jsou xorovany s 4-mi nizsimi bity 3. bajtu klice */
   cast1 = ( cast1 >> 1 ) & 0x0F;  /* maskovani neni potreba, ale ... */
 cfa:	66 95       	lsr	r22
   klic[2] = klic[2] ^ cast1;
 cfc:	6f 70       	andi	r22, 0x0F	; 15
 cfe:	12 96       	adiw	r26, 0x02	; 2
 d00:	8c 91       	ld	r24, X
 d02:	12 97       	sbiw	r26, 0x02	; 2
 d04:	86 27       	eor	r24, r22
 d06:	12 96       	adiw	r26, 0x02	; 2
 d08:	8c 93       	st	X, r24
}
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	08 95       	ret

00000d10 <encrypt_present_8>:


void encrypt_present_8( unsigned char * otevrenyText, unsigned char * sifrovanyText, unsigned char * vstupniKlic )
{
 d10:	bf 92       	push	r11
 d12:	cf 92       	push	r12
 d14:	df 92       	push	r13
 d16:	ef 92       	push	r14
 d18:	ff 92       	push	r15
 d1a:	0f 93       	push	r16
 d1c:	1f 93       	push	r17
 d1e:	df 93       	push	r29
 d20:	cf 93       	push	r28
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62
 d26:	64 97       	sbiw	r28, 0x14	; 20
 d28:	0f b6       	in	r0, 0x3f	; 63
 d2a:	f8 94       	cli
 d2c:	de bf       	out	0x3e, r29	; 62
 d2e:	0f be       	out	0x3f, r0	; 63
 d30:	cd bf       	out	0x3d, r28	; 61
 d32:	e6 2e       	mov	r14, r22
 d34:	b7 2e       	mov	r11, r23
	unsigned char stav[KLIC_VELIKOST];
	unsigned char * zdroj;
	//... Initialize ...
	
	// set trigger PIN
	set_pin(DDRB, 0b10100000);
 d36:	27 b3       	in	r18, 0x17	; 23
 d38:	20 6a       	ori	r18, 0xA0	; 160
 d3a:	27 bb       	out	0x17, r18	; 23
	set_pin(PORTB, 0b10100000);
 d3c:	28 b3       	in	r18, 0x18	; 24
 d3e:	20 6a       	ori	r18, 0xA0	; 160
 d40:	28 bb       	out	0x18, r18	; 24
 d42:	dc 01       	movw	r26, r24
 d44:	fe 01       	movw	r30, r28
 d46:	3b 96       	adiw	r30, 0x0b	; 11

 	/* zkopirovani vstupniho do pracovniho textu (v opacnem poradi) */
	for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 d48:	9e 01       	movw	r18, r28
 d4a:	2d 5e       	subi	r18, 0xED	; 237
 d4c:	3f 4f       	sbci	r19, 0xFF	; 255
		stav[i] = otevrenyText[BLOK_VELIKOST - 1 - i];
 d4e:	17 96       	adiw	r26, 0x07	; 7
 d50:	8c 91       	ld	r24, X
 d52:	17 97       	sbiw	r26, 0x07	; 7
 d54:	81 93       	st	Z+, r24
 d56:	11 97       	sbiw	r26, 0x01	; 1
	// set trigger PIN
	set_pin(DDRB, 0b10100000);
	set_pin(PORTB, 0b10100000);

 	/* zkopirovani vstupniho do pracovniho textu (v opacnem poradi) */
	for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 d58:	e2 17       	cp	r30, r18
 d5a:	f3 07       	cpc	r31, r19
 d5c:	c1 f7       	brne	.-16     	; 0xd4e <encrypt_present_8+0x3e>
		stav[i] = otevrenyText[BLOK_VELIKOST - 1 - i];
	}
	
	/* vychozi klic? */
	if ( vstupniKlic == 0 ) {
 d5e:	41 15       	cp	r20, r1
 d60:	51 05       	cpc	r21, r1
 d62:	11 f4       	brne	.+4      	; 0xd68 <encrypt_present_8+0x58>
 d64:	40 e8       	ldi	r20, 0x80	; 128
 d66:	50 e0       	ldi	r21, 0x00	; 0
 d68:	da 01       	movw	r26, r20
 d6a:	fe 01       	movw	r30, r28
 d6c:	31 96       	adiw	r30, 0x01	; 1
	}
	else {
   		zdroj = vstupniKlic;
	}
    /* klic je v opacnem poradi */
	for ( i = 0 ; i < KLIC_VELIKOST ; i++ ) {
 d6e:	9e 01       	movw	r18, r28
 d70:	25 5f       	subi	r18, 0xF5	; 245
 d72:	3f 4f       	sbci	r19, 0xFF	; 255
		klic[i] = zdroj[KLIC_VELIKOST - 1 - i];
 d74:	19 96       	adiw	r26, 0x09	; 9
 d76:	8c 91       	ld	r24, X
 d78:	19 97       	sbiw	r26, 0x09	; 9
 d7a:	81 93       	st	Z+, r24
 d7c:	11 97       	sbiw	r26, 0x01	; 1
	}
	else {
   		zdroj = vstupniKlic;
	}
    /* klic je v opacnem poradi */
	for ( i = 0 ; i < KLIC_VELIKOST ; i++ ) {
 d7e:	e2 17       	cp	r30, r18
 d80:	f3 07       	cpc	r31, r19
 d82:	c1 f7       	brne	.-16     	; 0xd74 <encrypt_present_8+0x64>
 d84:	ff 24       	eor	r15, r15
	}


	//... Encrypt ...
	for ( runda = 0 ; runda < RUND_POCET; runda++ ) {
		pridejRundovniKlic( stav, klic );      /* addRoundKey( STATE, K[i] ) */
 d86:	8e 01       	movw	r16, r28
 d88:	05 5f       	subi	r16, 0xF5	; 245
 d8a:	1f 4f       	sbci	r17, 0xFF	; 255
 d8c:	6e 01       	movw	r12, r28
 d8e:	08 94       	sec
 d90:	c1 1c       	adc	r12, r1
 d92:	d1 1c       	adc	r13, r1
 d94:	c8 01       	movw	r24, r16
 d96:	b6 01       	movw	r22, r12
 d98:	0e 94 94 05 	call	0xb28	; 0xb28 <pridejRundovniKlic>
    	substitucniVrstva( stav );             /* sBoxLayer( STATE ) */
 d9c:	c8 01       	movw	r24, r16
 d9e:	0e 94 a0 05 	call	0xb40	; 0xb40 <substitucniVrstva>
      	permutacniVrstva( stav );              /* pLayer( STATE ) */
 da2:	c8 01       	movw	r24, r16
 da4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <permutacniVrstva>
      	generujRundovniKlic( klic, runda );    /* keySchedule( ) */
 da8:	c6 01       	movw	r24, r12
 daa:	6f 2d       	mov	r22, r15
 dac:	0e 94 36 06 	call	0xc6c	; 0xc6c <generujRundovniKlic>
		klic[i] = zdroj[KLIC_VELIKOST - 1 - i];
	}


	//... Encrypt ...
	for ( runda = 0 ; runda < RUND_POCET; runda++ ) {
 db0:	f3 94       	inc	r15
 db2:	8f e1       	ldi	r24, 0x1F	; 31
 db4:	f8 16       	cp	r15, r24
 db6:	71 f7       	brne	.-36     	; 0xd94 <encrypt_present_8+0x84>
		pridejRundovniKlic( stav, klic );      /* addRoundKey( STATE, K[i] ) */
    	substitucniVrstva( stav );             /* sBoxLayer( STATE ) */
      	permutacniVrstva( stav );              /* pLayer( STATE ) */
      	generujRundovniKlic( klic, runda );    /* keySchedule( ) */
   	}
   	pridejRundovniKlic( stav, klic );
 db8:	c8 01       	movw	r24, r16
 dba:	b6 01       	movw	r22, r12
 dbc:	0e 94 94 05 	call	0xb28	; 0xb28 <pridejRundovniKlic>
 dc0:	fe 01       	movw	r30, r28
 dc2:	72 96       	adiw	r30, 0x12	; 18
 dc4:	8e 2d       	mov	r24, r14
 dc6:	9b 2d       	mov	r25, r11
 dc8:	9c 01       	movw	r18, r24
 dca:	d9 01       	movw	r26, r18
	
	/* vystup je v opacnem poradi */
	for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 dcc:	9e 01       	movw	r18, r28
 dce:	26 5f       	subi	r18, 0xF6	; 246
 dd0:	3f 4f       	sbci	r19, 0xFF	; 255
		sifrovanyText[i] = stav[BLOK_VELIKOST - 1 - i];
 dd2:	80 81       	ld	r24, Z
 dd4:	8d 93       	st	X+, r24
 dd6:	31 97       	sbiw	r30, 0x01	; 1
      	generujRundovniKlic( klic, runda );    /* keySchedule( ) */
   	}
   	pridejRundovniKlic( stav, klic );
	
	/* vystup je v opacnem poradi */
	for ( i = 0 ; i < BLOK_VELIKOST ; i++ ) {
 dd8:	e2 17       	cp	r30, r18
 dda:	f3 07       	cpc	r31, r19
 ddc:	d1 f7       	brne	.-12     	; 0xdd2 <encrypt_present_8+0xc2>
	}



	// clear trigger PIN
	clear_pin(PORTB, 0b01011111);
 dde:	88 b3       	in	r24, 0x18	; 24
 de0:	8f 75       	andi	r24, 0x5F	; 95
 de2:	88 bb       	out	0x18, r24	; 24

}
 de4:	64 96       	adiw	r28, 0x14	; 20
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	de bf       	out	0x3e, r29	; 62
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	cd bf       	out	0x3d, r28	; 61
 df0:	cf 91       	pop	r28
 df2:	df 91       	pop	r29
 df4:	1f 91       	pop	r17
 df6:	0f 91       	pop	r16
 df8:	ff 90       	pop	r15
 dfa:	ef 90       	pop	r14
 dfc:	df 90       	pop	r13
 dfe:	cf 90       	pop	r12
 e00:	bf 90       	pop	r11
 e02:	08 95       	ret

00000e04 <__divmodhi4>:
 e04:	97 fb       	bst	r25, 7
 e06:	09 2e       	mov	r0, r25
 e08:	07 26       	eor	r0, r23
 e0a:	0a d0       	rcall	.+20     	; 0xe20 <__divmodhi4_neg1>
 e0c:	77 fd       	sbrc	r23, 7
 e0e:	04 d0       	rcall	.+8      	; 0xe18 <__divmodhi4_neg2>
 e10:	0c d0       	rcall	.+24     	; 0xe2a <__udivmodhi4>
 e12:	06 d0       	rcall	.+12     	; 0xe20 <__divmodhi4_neg1>
 e14:	00 20       	and	r0, r0
 e16:	1a f4       	brpl	.+6      	; 0xe1e <__divmodhi4_exit>

00000e18 <__divmodhi4_neg2>:
 e18:	70 95       	com	r23
 e1a:	61 95       	neg	r22
 e1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000e1e <__divmodhi4_exit>:
 e1e:	08 95       	ret

00000e20 <__divmodhi4_neg1>:
 e20:	f6 f7       	brtc	.-4      	; 0xe1e <__divmodhi4_exit>
 e22:	90 95       	com	r25
 e24:	81 95       	neg	r24
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	08 95       	ret

00000e2a <__udivmodhi4>:
 e2a:	aa 1b       	sub	r26, r26
 e2c:	bb 1b       	sub	r27, r27
 e2e:	51 e1       	ldi	r21, 0x11	; 17
 e30:	07 c0       	rjmp	.+14     	; 0xe40 <__udivmodhi4_ep>

00000e32 <__udivmodhi4_loop>:
 e32:	aa 1f       	adc	r26, r26
 e34:	bb 1f       	adc	r27, r27
 e36:	a6 17       	cp	r26, r22
 e38:	b7 07       	cpc	r27, r23
 e3a:	10 f0       	brcs	.+4      	; 0xe40 <__udivmodhi4_ep>
 e3c:	a6 1b       	sub	r26, r22
 e3e:	b7 0b       	sbc	r27, r23

00000e40 <__udivmodhi4_ep>:
 e40:	88 1f       	adc	r24, r24
 e42:	99 1f       	adc	r25, r25
 e44:	5a 95       	dec	r21
 e46:	a9 f7       	brne	.-22     	; 0xe32 <__udivmodhi4_loop>
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	bc 01       	movw	r22, r24
 e4e:	cd 01       	movw	r24, r26
 e50:	08 95       	ret

00000e52 <_exit>:
 e52:	f8 94       	cli

00000e54 <__stop_program>:
 e54:	ff cf       	rjmp	.-2      	; 0xe54 <__stop_program>
